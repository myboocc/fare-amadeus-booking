/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.intlgds.amadeus.booking.proto.request;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AmadeusBookingRequest implements org.apache.thrift.TBase<AmadeusBookingRequest, AmadeusBookingRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AmadeusBookingRequest");

  private static final org.apache.thrift.protocol.TField ROUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("route", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField FARE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fareType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TICKETING_CARRIER_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketingCarrier", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OTHER_TKT_CARRIER_FIELD_DESC = new org.apache.thrift.protocol.TField("otherTktCarrier", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PASSENGER_PRICES_FIELD_DESC = new org.apache.thrift.protocol.TField("passengerPrices", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField CONTACTS_FIELD_DESC = new org.apache.thrift.protocol.TField("contacts", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField PASSENGERS_FIELD_DESC = new org.apache.thrift.protocol.TField("passengers", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField CUSTOMER_ORDER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("customerOrderNo", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField AFTER_TICKET_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("afterTicketURL", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField AFTER_PAY_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("afterPayURL", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AmadeusBookingRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AmadeusBookingRequestTupleSchemeFactory());
  }

  public List<com.intlgds.amadeus.booking.route.Route> route; // required
  public String fareType; // optional
  public String key; // required
  public String ticketingCarrier; // required
  public String otherTktCarrier; // optional
  public List<PassengerPrice> passengerPrices; // required
  public List<Contact> contacts; // required
  public List<Passenger> passengers; // required
  public String customerOrderNo; // required
  public String afterTicketURL; // optional
  public String afterPayURL; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROUTE((short)1, "route"),
    FARE_TYPE((short)2, "fareType"),
    KEY((short)3, "key"),
    TICKETING_CARRIER((short)4, "ticketingCarrier"),
    OTHER_TKT_CARRIER((short)5, "otherTktCarrier"),
    PASSENGER_PRICES((short)6, "passengerPrices"),
    CONTACTS((short)7, "contacts"),
    PASSENGERS((short)8, "passengers"),
    CUSTOMER_ORDER_NO((short)9, "customerOrderNo"),
    AFTER_TICKET_URL((short)10, "afterTicketURL"),
    AFTER_PAY_URL((short)11, "afterPayURL");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROUTE
          return ROUTE;
        case 2: // FARE_TYPE
          return FARE_TYPE;
        case 3: // KEY
          return KEY;
        case 4: // TICKETING_CARRIER
          return TICKETING_CARRIER;
        case 5: // OTHER_TKT_CARRIER
          return OTHER_TKT_CARRIER;
        case 6: // PASSENGER_PRICES
          return PASSENGER_PRICES;
        case 7: // CONTACTS
          return CONTACTS;
        case 8: // PASSENGERS
          return PASSENGERS;
        case 9: // CUSTOMER_ORDER_NO
          return CUSTOMER_ORDER_NO;
        case 10: // AFTER_TICKET_URL
          return AFTER_TICKET_URL;
        case 11: // AFTER_PAY_URL
          return AFTER_PAY_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.FARE_TYPE,_Fields.OTHER_TKT_CARRIER,_Fields.AFTER_TICKET_URL,_Fields.AFTER_PAY_URL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROUTE, new org.apache.thrift.meta_data.FieldMetaData("route", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.intlgds.amadeus.booking.route.Route.class))));
    tmpMap.put(_Fields.FARE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fareType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKETING_CARRIER, new org.apache.thrift.meta_data.FieldMetaData("ticketingCarrier", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OTHER_TKT_CARRIER, new org.apache.thrift.meta_data.FieldMetaData("otherTktCarrier", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSENGER_PRICES, new org.apache.thrift.meta_data.FieldMetaData("passengerPrices", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PassengerPrice.class))));
    tmpMap.put(_Fields.CONTACTS, new org.apache.thrift.meta_data.FieldMetaData("contacts", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Contact.class))));
    tmpMap.put(_Fields.PASSENGERS, new org.apache.thrift.meta_data.FieldMetaData("passengers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Passenger.class))));
    tmpMap.put(_Fields.CUSTOMER_ORDER_NO, new org.apache.thrift.meta_data.FieldMetaData("customerOrderNo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AFTER_TICKET_URL, new org.apache.thrift.meta_data.FieldMetaData("afterTicketURL", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AFTER_PAY_URL, new org.apache.thrift.meta_data.FieldMetaData("afterPayURL", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AmadeusBookingRequest.class, metaDataMap);
  }

  public AmadeusBookingRequest() {
  }

  public AmadeusBookingRequest(
    List<com.intlgds.amadeus.booking.route.Route> route,
    String key,
    String ticketingCarrier,
    List<PassengerPrice> passengerPrices,
    List<Contact> contacts,
    List<Passenger> passengers,
    String customerOrderNo)
  {
    this();
    this.route = route;
    this.key = key;
    this.ticketingCarrier = ticketingCarrier;
    this.passengerPrices = passengerPrices;
    this.contacts = contacts;
    this.passengers = passengers;
    this.customerOrderNo = customerOrderNo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AmadeusBookingRequest(AmadeusBookingRequest other) {
    if (other.isSetRoute()) {
      List<com.intlgds.amadeus.booking.route.Route> __this__route = new ArrayList<com.intlgds.amadeus.booking.route.Route>();
      for (com.intlgds.amadeus.booking.route.Route other_element : other.route) {
        __this__route.add(new com.intlgds.amadeus.booking.route.Route(other_element));
      }
      this.route = __this__route;
    }
    if (other.isSetFareType()) {
      this.fareType = other.fareType;
    }
    if (other.isSetKey()) {
      this.key = other.key;
    }
    if (other.isSetTicketingCarrier()) {
      this.ticketingCarrier = other.ticketingCarrier;
    }
    if (other.isSetOtherTktCarrier()) {
      this.otherTktCarrier = other.otherTktCarrier;
    }
    if (other.isSetPassengerPrices()) {
      List<PassengerPrice> __this__passengerPrices = new ArrayList<PassengerPrice>();
      for (PassengerPrice other_element : other.passengerPrices) {
        __this__passengerPrices.add(new PassengerPrice(other_element));
      }
      this.passengerPrices = __this__passengerPrices;
    }
    if (other.isSetContacts()) {
      List<Contact> __this__contacts = new ArrayList<Contact>();
      for (Contact other_element : other.contacts) {
        __this__contacts.add(new Contact(other_element));
      }
      this.contacts = __this__contacts;
    }
    if (other.isSetPassengers()) {
      List<Passenger> __this__passengers = new ArrayList<Passenger>();
      for (Passenger other_element : other.passengers) {
        __this__passengers.add(new Passenger(other_element));
      }
      this.passengers = __this__passengers;
    }
    if (other.isSetCustomerOrderNo()) {
      this.customerOrderNo = other.customerOrderNo;
    }
    if (other.isSetAfterTicketURL()) {
      this.afterTicketURL = other.afterTicketURL;
    }
    if (other.isSetAfterPayURL()) {
      this.afterPayURL = other.afterPayURL;
    }
  }

  public AmadeusBookingRequest deepCopy() {
    return new AmadeusBookingRequest(this);
  }

  @Override
  public void clear() {
    this.route = null;
    this.fareType = null;
    this.key = null;
    this.ticketingCarrier = null;
    this.otherTktCarrier = null;
    this.passengerPrices = null;
    this.contacts = null;
    this.passengers = null;
    this.customerOrderNo = null;
    this.afterTicketURL = null;
    this.afterPayURL = null;
  }

  public int getRouteSize() {
    return (this.route == null) ? 0 : this.route.size();
  }

  public java.util.Iterator<com.intlgds.amadeus.booking.route.Route> getRouteIterator() {
    return (this.route == null) ? null : this.route.iterator();
  }

  public void addToRoute(com.intlgds.amadeus.booking.route.Route elem) {
    if (this.route == null) {
      this.route = new ArrayList<com.intlgds.amadeus.booking.route.Route>();
    }
    this.route.add(elem);
  }

  public List<com.intlgds.amadeus.booking.route.Route> getRoute() {
    return this.route;
  }

  public AmadeusBookingRequest setRoute(List<com.intlgds.amadeus.booking.route.Route> route) {
    this.route = route;
    return this;
  }

  public void unsetRoute() {
    this.route = null;
  }

  /** Returns true if field route is set (has been assigned a value) and false otherwise */
  public boolean isSetRoute() {
    return this.route != null;
  }

  public void setRouteIsSet(boolean value) {
    if (!value) {
      this.route = null;
    }
  }

  public String getFareType() {
    return this.fareType;
  }

  public AmadeusBookingRequest setFareType(String fareType) {
    this.fareType = fareType;
    return this;
  }

  public void unsetFareType() {
    this.fareType = null;
  }

  /** Returns true if field fareType is set (has been assigned a value) and false otherwise */
  public boolean isSetFareType() {
    return this.fareType != null;
  }

  public void setFareTypeIsSet(boolean value) {
    if (!value) {
      this.fareType = null;
    }
  }

  public String getKey() {
    return this.key;
  }

  public AmadeusBookingRequest setKey(String key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  public String getTicketingCarrier() {
    return this.ticketingCarrier;
  }

  public AmadeusBookingRequest setTicketingCarrier(String ticketingCarrier) {
    this.ticketingCarrier = ticketingCarrier;
    return this;
  }

  public void unsetTicketingCarrier() {
    this.ticketingCarrier = null;
  }

  /** Returns true if field ticketingCarrier is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketingCarrier() {
    return this.ticketingCarrier != null;
  }

  public void setTicketingCarrierIsSet(boolean value) {
    if (!value) {
      this.ticketingCarrier = null;
    }
  }

  public String getOtherTktCarrier() {
    return this.otherTktCarrier;
  }

  public AmadeusBookingRequest setOtherTktCarrier(String otherTktCarrier) {
    this.otherTktCarrier = otherTktCarrier;
    return this;
  }

  public void unsetOtherTktCarrier() {
    this.otherTktCarrier = null;
  }

  /** Returns true if field otherTktCarrier is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherTktCarrier() {
    return this.otherTktCarrier != null;
  }

  public void setOtherTktCarrierIsSet(boolean value) {
    if (!value) {
      this.otherTktCarrier = null;
    }
  }

  public int getPassengerPricesSize() {
    return (this.passengerPrices == null) ? 0 : this.passengerPrices.size();
  }

  public java.util.Iterator<PassengerPrice> getPassengerPricesIterator() {
    return (this.passengerPrices == null) ? null : this.passengerPrices.iterator();
  }

  public void addToPassengerPrices(PassengerPrice elem) {
    if (this.passengerPrices == null) {
      this.passengerPrices = new ArrayList<PassengerPrice>();
    }
    this.passengerPrices.add(elem);
  }

  public List<PassengerPrice> getPassengerPrices() {
    return this.passengerPrices;
  }

  public AmadeusBookingRequest setPassengerPrices(List<PassengerPrice> passengerPrices) {
    this.passengerPrices = passengerPrices;
    return this;
  }

  public void unsetPassengerPrices() {
    this.passengerPrices = null;
  }

  /** Returns true if field passengerPrices is set (has been assigned a value) and false otherwise */
  public boolean isSetPassengerPrices() {
    return this.passengerPrices != null;
  }

  public void setPassengerPricesIsSet(boolean value) {
    if (!value) {
      this.passengerPrices = null;
    }
  }

  public int getContactsSize() {
    return (this.contacts == null) ? 0 : this.contacts.size();
  }

  public java.util.Iterator<Contact> getContactsIterator() {
    return (this.contacts == null) ? null : this.contacts.iterator();
  }

  public void addToContacts(Contact elem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<Contact>();
    }
    this.contacts.add(elem);
  }

  public List<Contact> getContacts() {
    return this.contacts;
  }

  public AmadeusBookingRequest setContacts(List<Contact> contacts) {
    this.contacts = contacts;
    return this;
  }

  public void unsetContacts() {
    this.contacts = null;
  }

  /** Returns true if field contacts is set (has been assigned a value) and false otherwise */
  public boolean isSetContacts() {
    return this.contacts != null;
  }

  public void setContactsIsSet(boolean value) {
    if (!value) {
      this.contacts = null;
    }
  }

  public int getPassengersSize() {
    return (this.passengers == null) ? 0 : this.passengers.size();
  }

  public java.util.Iterator<Passenger> getPassengersIterator() {
    return (this.passengers == null) ? null : this.passengers.iterator();
  }

  public void addToPassengers(Passenger elem) {
    if (this.passengers == null) {
      this.passengers = new ArrayList<Passenger>();
    }
    this.passengers.add(elem);
  }

  public List<Passenger> getPassengers() {
    return this.passengers;
  }

  public AmadeusBookingRequest setPassengers(List<Passenger> passengers) {
    this.passengers = passengers;
    return this;
  }

  public void unsetPassengers() {
    this.passengers = null;
  }

  /** Returns true if field passengers is set (has been assigned a value) and false otherwise */
  public boolean isSetPassengers() {
    return this.passengers != null;
  }

  public void setPassengersIsSet(boolean value) {
    if (!value) {
      this.passengers = null;
    }
  }

  public String getCustomerOrderNo() {
    return this.customerOrderNo;
  }

  public AmadeusBookingRequest setCustomerOrderNo(String customerOrderNo) {
    this.customerOrderNo = customerOrderNo;
    return this;
  }

  public void unsetCustomerOrderNo() {
    this.customerOrderNo = null;
  }

  /** Returns true if field customerOrderNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomerOrderNo() {
    return this.customerOrderNo != null;
  }

  public void setCustomerOrderNoIsSet(boolean value) {
    if (!value) {
      this.customerOrderNo = null;
    }
  }

  public String getAfterTicketURL() {
    return this.afterTicketURL;
  }

  public AmadeusBookingRequest setAfterTicketURL(String afterTicketURL) {
    this.afterTicketURL = afterTicketURL;
    return this;
  }

  public void unsetAfterTicketURL() {
    this.afterTicketURL = null;
  }

  /** Returns true if field afterTicketURL is set (has been assigned a value) and false otherwise */
  public boolean isSetAfterTicketURL() {
    return this.afterTicketURL != null;
  }

  public void setAfterTicketURLIsSet(boolean value) {
    if (!value) {
      this.afterTicketURL = null;
    }
  }

  public String getAfterPayURL() {
    return this.afterPayURL;
  }

  public AmadeusBookingRequest setAfterPayURL(String afterPayURL) {
    this.afterPayURL = afterPayURL;
    return this;
  }

  public void unsetAfterPayURL() {
    this.afterPayURL = null;
  }

  /** Returns true if field afterPayURL is set (has been assigned a value) and false otherwise */
  public boolean isSetAfterPayURL() {
    return this.afterPayURL != null;
  }

  public void setAfterPayURLIsSet(boolean value) {
    if (!value) {
      this.afterPayURL = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROUTE:
      if (value == null) {
        unsetRoute();
      } else {
        setRoute((List<com.intlgds.amadeus.booking.route.Route>)value);
      }
      break;

    case FARE_TYPE:
      if (value == null) {
        unsetFareType();
      } else {
        setFareType((String)value);
      }
      break;

    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((String)value);
      }
      break;

    case TICKETING_CARRIER:
      if (value == null) {
        unsetTicketingCarrier();
      } else {
        setTicketingCarrier((String)value);
      }
      break;

    case OTHER_TKT_CARRIER:
      if (value == null) {
        unsetOtherTktCarrier();
      } else {
        setOtherTktCarrier((String)value);
      }
      break;

    case PASSENGER_PRICES:
      if (value == null) {
        unsetPassengerPrices();
      } else {
        setPassengerPrices((List<PassengerPrice>)value);
      }
      break;

    case CONTACTS:
      if (value == null) {
        unsetContacts();
      } else {
        setContacts((List<Contact>)value);
      }
      break;

    case PASSENGERS:
      if (value == null) {
        unsetPassengers();
      } else {
        setPassengers((List<Passenger>)value);
      }
      break;

    case CUSTOMER_ORDER_NO:
      if (value == null) {
        unsetCustomerOrderNo();
      } else {
        setCustomerOrderNo((String)value);
      }
      break;

    case AFTER_TICKET_URL:
      if (value == null) {
        unsetAfterTicketURL();
      } else {
        setAfterTicketURL((String)value);
      }
      break;

    case AFTER_PAY_URL:
      if (value == null) {
        unsetAfterPayURL();
      } else {
        setAfterPayURL((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROUTE:
      return getRoute();

    case FARE_TYPE:
      return getFareType();

    case KEY:
      return getKey();

    case TICKETING_CARRIER:
      return getTicketingCarrier();

    case OTHER_TKT_CARRIER:
      return getOtherTktCarrier();

    case PASSENGER_PRICES:
      return getPassengerPrices();

    case CONTACTS:
      return getContacts();

    case PASSENGERS:
      return getPassengers();

    case CUSTOMER_ORDER_NO:
      return getCustomerOrderNo();

    case AFTER_TICKET_URL:
      return getAfterTicketURL();

    case AFTER_PAY_URL:
      return getAfterPayURL();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROUTE:
      return isSetRoute();
    case FARE_TYPE:
      return isSetFareType();
    case KEY:
      return isSetKey();
    case TICKETING_CARRIER:
      return isSetTicketingCarrier();
    case OTHER_TKT_CARRIER:
      return isSetOtherTktCarrier();
    case PASSENGER_PRICES:
      return isSetPassengerPrices();
    case CONTACTS:
      return isSetContacts();
    case PASSENGERS:
      return isSetPassengers();
    case CUSTOMER_ORDER_NO:
      return isSetCustomerOrderNo();
    case AFTER_TICKET_URL:
      return isSetAfterTicketURL();
    case AFTER_PAY_URL:
      return isSetAfterPayURL();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AmadeusBookingRequest)
      return this.equals((AmadeusBookingRequest)that);
    return false;
  }

  public boolean equals(AmadeusBookingRequest that) {
    if (that == null)
      return false;

    boolean this_present_route = true && this.isSetRoute();
    boolean that_present_route = true && that.isSetRoute();
    if (this_present_route || that_present_route) {
      if (!(this_present_route && that_present_route))
        return false;
      if (!this.route.equals(that.route))
        return false;
    }

    boolean this_present_fareType = true && this.isSetFareType();
    boolean that_present_fareType = true && that.isSetFareType();
    if (this_present_fareType || that_present_fareType) {
      if (!(this_present_fareType && that_present_fareType))
        return false;
      if (!this.fareType.equals(that.fareType))
        return false;
    }

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_ticketingCarrier = true && this.isSetTicketingCarrier();
    boolean that_present_ticketingCarrier = true && that.isSetTicketingCarrier();
    if (this_present_ticketingCarrier || that_present_ticketingCarrier) {
      if (!(this_present_ticketingCarrier && that_present_ticketingCarrier))
        return false;
      if (!this.ticketingCarrier.equals(that.ticketingCarrier))
        return false;
    }

    boolean this_present_otherTktCarrier = true && this.isSetOtherTktCarrier();
    boolean that_present_otherTktCarrier = true && that.isSetOtherTktCarrier();
    if (this_present_otherTktCarrier || that_present_otherTktCarrier) {
      if (!(this_present_otherTktCarrier && that_present_otherTktCarrier))
        return false;
      if (!this.otherTktCarrier.equals(that.otherTktCarrier))
        return false;
    }

    boolean this_present_passengerPrices = true && this.isSetPassengerPrices();
    boolean that_present_passengerPrices = true && that.isSetPassengerPrices();
    if (this_present_passengerPrices || that_present_passengerPrices) {
      if (!(this_present_passengerPrices && that_present_passengerPrices))
        return false;
      if (!this.passengerPrices.equals(that.passengerPrices))
        return false;
    }

    boolean this_present_contacts = true && this.isSetContacts();
    boolean that_present_contacts = true && that.isSetContacts();
    if (this_present_contacts || that_present_contacts) {
      if (!(this_present_contacts && that_present_contacts))
        return false;
      if (!this.contacts.equals(that.contacts))
        return false;
    }

    boolean this_present_passengers = true && this.isSetPassengers();
    boolean that_present_passengers = true && that.isSetPassengers();
    if (this_present_passengers || that_present_passengers) {
      if (!(this_present_passengers && that_present_passengers))
        return false;
      if (!this.passengers.equals(that.passengers))
        return false;
    }

    boolean this_present_customerOrderNo = true && this.isSetCustomerOrderNo();
    boolean that_present_customerOrderNo = true && that.isSetCustomerOrderNo();
    if (this_present_customerOrderNo || that_present_customerOrderNo) {
      if (!(this_present_customerOrderNo && that_present_customerOrderNo))
        return false;
      if (!this.customerOrderNo.equals(that.customerOrderNo))
        return false;
    }

    boolean this_present_afterTicketURL = true && this.isSetAfterTicketURL();
    boolean that_present_afterTicketURL = true && that.isSetAfterTicketURL();
    if (this_present_afterTicketURL || that_present_afterTicketURL) {
      if (!(this_present_afterTicketURL && that_present_afterTicketURL))
        return false;
      if (!this.afterTicketURL.equals(that.afterTicketURL))
        return false;
    }

    boolean this_present_afterPayURL = true && this.isSetAfterPayURL();
    boolean that_present_afterPayURL = true && that.isSetAfterPayURL();
    if (this_present_afterPayURL || that_present_afterPayURL) {
      if (!(this_present_afterPayURL && that_present_afterPayURL))
        return false;
      if (!this.afterPayURL.equals(that.afterPayURL))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AmadeusBookingRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AmadeusBookingRequest typedOther = (AmadeusBookingRequest)other;

    lastComparison = Boolean.valueOf(isSetRoute()).compareTo(typedOther.isSetRoute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoute()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.route, typedOther.route);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFareType()).compareTo(typedOther.isSetFareType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFareType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fareType, typedOther.fareType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicketingCarrier()).compareTo(typedOther.isSetTicketingCarrier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketingCarrier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketingCarrier, typedOther.ticketingCarrier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherTktCarrier()).compareTo(typedOther.isSetOtherTktCarrier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherTktCarrier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherTktCarrier, typedOther.otherTktCarrier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassengerPrices()).compareTo(typedOther.isSetPassengerPrices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassengerPrices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passengerPrices, typedOther.passengerPrices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContacts()).compareTo(typedOther.isSetContacts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContacts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contacts, typedOther.contacts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassengers()).compareTo(typedOther.isSetPassengers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassengers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passengers, typedOther.passengers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomerOrderNo()).compareTo(typedOther.isSetCustomerOrderNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomerOrderNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerOrderNo, typedOther.customerOrderNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAfterTicketURL()).compareTo(typedOther.isSetAfterTicketURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAfterTicketURL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.afterTicketURL, typedOther.afterTicketURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAfterPayURL()).compareTo(typedOther.isSetAfterPayURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAfterPayURL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.afterPayURL, typedOther.afterPayURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AmadeusBookingRequest(");
    boolean first = true;

    sb.append("route:");
    if (this.route == null) {
      sb.append("null");
    } else {
      sb.append(this.route);
    }
    first = false;
    if (isSetFareType()) {
      if (!first) sb.append(", ");
      sb.append("fareType:");
      if (this.fareType == null) {
        sb.append("null");
      } else {
        sb.append(this.fareType);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("key:");
    if (this.key == null) {
      sb.append("null");
    } else {
      sb.append(this.key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketingCarrier:");
    if (this.ticketingCarrier == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketingCarrier);
    }
    first = false;
    if (isSetOtherTktCarrier()) {
      if (!first) sb.append(", ");
      sb.append("otherTktCarrier:");
      if (this.otherTktCarrier == null) {
        sb.append("null");
      } else {
        sb.append(this.otherTktCarrier);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("passengerPrices:");
    if (this.passengerPrices == null) {
      sb.append("null");
    } else {
      sb.append(this.passengerPrices);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contacts:");
    if (this.contacts == null) {
      sb.append("null");
    } else {
      sb.append(this.contacts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("passengers:");
    if (this.passengers == null) {
      sb.append("null");
    } else {
      sb.append(this.passengers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("customerOrderNo:");
    if (this.customerOrderNo == null) {
      sb.append("null");
    } else {
      sb.append(this.customerOrderNo);
    }
    first = false;
    if (isSetAfterTicketURL()) {
      if (!first) sb.append(", ");
      sb.append("afterTicketURL:");
      if (this.afterTicketURL == null) {
        sb.append("null");
      } else {
        sb.append(this.afterTicketURL);
      }
      first = false;
    }
    if (isSetAfterPayURL()) {
      if (!first) sb.append(", ");
      sb.append("afterPayURL:");
      if (this.afterPayURL == null) {
        sb.append("null");
      } else {
        sb.append(this.afterPayURL);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (route == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'route' was not present! Struct: " + toString());
    }
    if (key == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'key' was not present! Struct: " + toString());
    }
    if (ticketingCarrier == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticketingCarrier' was not present! Struct: " + toString());
    }
    if (passengerPrices == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'passengerPrices' was not present! Struct: " + toString());
    }
    if (contacts == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'contacts' was not present! Struct: " + toString());
    }
    if (passengers == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'passengers' was not present! Struct: " + toString());
    }
    if (customerOrderNo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'customerOrderNo' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AmadeusBookingRequestStandardSchemeFactory implements SchemeFactory {
    public AmadeusBookingRequestStandardScheme getScheme() {
      return new AmadeusBookingRequestStandardScheme();
    }
  }

  private static class AmadeusBookingRequestStandardScheme extends StandardScheme<AmadeusBookingRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AmadeusBookingRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROUTE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.route = new ArrayList<com.intlgds.amadeus.booking.route.Route>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  com.intlgds.amadeus.booking.route.Route _elem2; // required
                  _elem2 = new com.intlgds.amadeus.booking.route.Route();
                  _elem2.read(iprot);
                  struct.route.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setRouteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FARE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fareType = iprot.readString();
              struct.setFareTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key = iprot.readString();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TICKETING_CARRIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketingCarrier = iprot.readString();
              struct.setTicketingCarrierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OTHER_TKT_CARRIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.otherTktCarrier = iprot.readString();
              struct.setOtherTktCarrierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PASSENGER_PRICES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.passengerPrices = new ArrayList<PassengerPrice>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  PassengerPrice _elem5; // required
                  _elem5 = new PassengerPrice();
                  _elem5.read(iprot);
                  struct.passengerPrices.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setPassengerPricesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTACTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.contacts = new ArrayList<Contact>(_list6.size);
                for (int _i7 = 0; _i7 < _list6.size; ++_i7)
                {
                  Contact _elem8; // required
                  _elem8 = new Contact();
                  _elem8.read(iprot);
                  struct.contacts.add(_elem8);
                }
                iprot.readListEnd();
              }
              struct.setContactsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PASSENGERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.passengers = new ArrayList<Passenger>(_list9.size);
                for (int _i10 = 0; _i10 < _list9.size; ++_i10)
                {
                  Passenger _elem11; // required
                  _elem11 = new Passenger();
                  _elem11.read(iprot);
                  struct.passengers.add(_elem11);
                }
                iprot.readListEnd();
              }
              struct.setPassengersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CUSTOMER_ORDER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customerOrderNo = iprot.readString();
              struct.setCustomerOrderNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // AFTER_TICKET_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.afterTicketURL = iprot.readString();
              struct.setAfterTicketURLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // AFTER_PAY_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.afterPayURL = iprot.readString();
              struct.setAfterPayURLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AmadeusBookingRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.route != null) {
        oprot.writeFieldBegin(ROUTE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.route.size()));
          for (com.intlgds.amadeus.booking.route.Route _iter12 : struct.route)
          {
            _iter12.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.fareType != null) {
        if (struct.isSetFareType()) {
          oprot.writeFieldBegin(FARE_TYPE_FIELD_DESC);
          oprot.writeString(struct.fareType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(struct.key);
        oprot.writeFieldEnd();
      }
      if (struct.ticketingCarrier != null) {
        oprot.writeFieldBegin(TICKETING_CARRIER_FIELD_DESC);
        oprot.writeString(struct.ticketingCarrier);
        oprot.writeFieldEnd();
      }
      if (struct.otherTktCarrier != null) {
        if (struct.isSetOtherTktCarrier()) {
          oprot.writeFieldBegin(OTHER_TKT_CARRIER_FIELD_DESC);
          oprot.writeString(struct.otherTktCarrier);
          oprot.writeFieldEnd();
        }
      }
      if (struct.passengerPrices != null) {
        oprot.writeFieldBegin(PASSENGER_PRICES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.passengerPrices.size()));
          for (PassengerPrice _iter13 : struct.passengerPrices)
          {
            _iter13.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.contacts != null) {
        oprot.writeFieldBegin(CONTACTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.contacts.size()));
          for (Contact _iter14 : struct.contacts)
          {
            _iter14.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.passengers != null) {
        oprot.writeFieldBegin(PASSENGERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.passengers.size()));
          for (Passenger _iter15 : struct.passengers)
          {
            _iter15.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.customerOrderNo != null) {
        oprot.writeFieldBegin(CUSTOMER_ORDER_NO_FIELD_DESC);
        oprot.writeString(struct.customerOrderNo);
        oprot.writeFieldEnd();
      }
      if (struct.afterTicketURL != null) {
        if (struct.isSetAfterTicketURL()) {
          oprot.writeFieldBegin(AFTER_TICKET_URL_FIELD_DESC);
          oprot.writeString(struct.afterTicketURL);
          oprot.writeFieldEnd();
        }
      }
      if (struct.afterPayURL != null) {
        if (struct.isSetAfterPayURL()) {
          oprot.writeFieldBegin(AFTER_PAY_URL_FIELD_DESC);
          oprot.writeString(struct.afterPayURL);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AmadeusBookingRequestTupleSchemeFactory implements SchemeFactory {
    public AmadeusBookingRequestTupleScheme getScheme() {
      return new AmadeusBookingRequestTupleScheme();
    }
  }

  private static class AmadeusBookingRequestTupleScheme extends TupleScheme<AmadeusBookingRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AmadeusBookingRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.route.size());
        for (com.intlgds.amadeus.booking.route.Route _iter16 : struct.route)
        {
          _iter16.write(oprot);
        }
      }
      oprot.writeString(struct.key);
      oprot.writeString(struct.ticketingCarrier);
      {
        oprot.writeI32(struct.passengerPrices.size());
        for (PassengerPrice _iter17 : struct.passengerPrices)
        {
          _iter17.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.contacts.size());
        for (Contact _iter18 : struct.contacts)
        {
          _iter18.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.passengers.size());
        for (Passenger _iter19 : struct.passengers)
        {
          _iter19.write(oprot);
        }
      }
      oprot.writeString(struct.customerOrderNo);
      BitSet optionals = new BitSet();
      if (struct.isSetFareType()) {
        optionals.set(0);
      }
      if (struct.isSetOtherTktCarrier()) {
        optionals.set(1);
      }
      if (struct.isSetAfterTicketURL()) {
        optionals.set(2);
      }
      if (struct.isSetAfterPayURL()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFareType()) {
        oprot.writeString(struct.fareType);
      }
      if (struct.isSetOtherTktCarrier()) {
        oprot.writeString(struct.otherTktCarrier);
      }
      if (struct.isSetAfterTicketURL()) {
        oprot.writeString(struct.afterTicketURL);
      }
      if (struct.isSetAfterPayURL()) {
        oprot.writeString(struct.afterPayURL);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AmadeusBookingRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list20 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.route = new ArrayList<com.intlgds.amadeus.booking.route.Route>(_list20.size);
        for (int _i21 = 0; _i21 < _list20.size; ++_i21)
        {
          com.intlgds.amadeus.booking.route.Route _elem22; // required
          _elem22 = new com.intlgds.amadeus.booking.route.Route();
          _elem22.read(iprot);
          struct.route.add(_elem22);
        }
      }
      struct.setRouteIsSet(true);
      struct.key = iprot.readString();
      struct.setKeyIsSet(true);
      struct.ticketingCarrier = iprot.readString();
      struct.setTicketingCarrierIsSet(true);
      {
        org.apache.thrift.protocol.TList _list23 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.passengerPrices = new ArrayList<PassengerPrice>(_list23.size);
        for (int _i24 = 0; _i24 < _list23.size; ++_i24)
        {
          PassengerPrice _elem25; // required
          _elem25 = new PassengerPrice();
          _elem25.read(iprot);
          struct.passengerPrices.add(_elem25);
        }
      }
      struct.setPassengerPricesIsSet(true);
      {
        org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.contacts = new ArrayList<Contact>(_list26.size);
        for (int _i27 = 0; _i27 < _list26.size; ++_i27)
        {
          Contact _elem28; // required
          _elem28 = new Contact();
          _elem28.read(iprot);
          struct.contacts.add(_elem28);
        }
      }
      struct.setContactsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.passengers = new ArrayList<Passenger>(_list29.size);
        for (int _i30 = 0; _i30 < _list29.size; ++_i30)
        {
          Passenger _elem31; // required
          _elem31 = new Passenger();
          _elem31.read(iprot);
          struct.passengers.add(_elem31);
        }
      }
      struct.setPassengersIsSet(true);
      struct.customerOrderNo = iprot.readString();
      struct.setCustomerOrderNoIsSet(true);
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.fareType = iprot.readString();
        struct.setFareTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.otherTktCarrier = iprot.readString();
        struct.setOtherTktCarrierIsSet(true);
      }
      if (incoming.get(2)) {
        struct.afterTicketURL = iprot.readString();
        struct.setAfterTicketURLIsSet(true);
      }
      if (incoming.get(3)) {
        struct.afterPayURL = iprot.readString();
        struct.setAfterPayURLIsSet(true);
      }
    }
  }

}

