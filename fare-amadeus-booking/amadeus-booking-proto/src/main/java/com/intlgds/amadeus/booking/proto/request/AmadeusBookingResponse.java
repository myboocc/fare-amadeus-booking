/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.intlgds.amadeus.booking.proto.request;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AmadeusBookingResponse implements org.apache.thrift.TBase<AmadeusBookingResponse, AmadeusBookingResponse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AmadeusBookingResponse");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PNR_FIELD_DESC = new org.apache.thrift.protocol.TField("pnr", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PNR_LARGE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("pnrLargeCode", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ORDER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PNR_LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("pnrLimit", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AmadeusBookingResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AmadeusBookingResponseTupleSchemeFactory());
  }

  public String status; // required
  public String msg; // optional
  public String pnr; // required
  public String pnrLargeCode; // optional
  public String orderNo; // required
  public String pnrLimit; // required
  public com.intlgds.amadeus.booking.error.AmadeusBookingErrorTable error; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    MSG((short)2, "msg"),
    PNR((short)3, "pnr"),
    PNR_LARGE_CODE((short)4, "pnrLargeCode"),
    ORDER_NO((short)5, "orderNo"),
    PNR_LIMIT((short)6, "pnrLimit"),
    ERROR((short)7, "error");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // MSG
          return MSG;
        case 3: // PNR
          return PNR;
        case 4: // PNR_LARGE_CODE
          return PNR_LARGE_CODE;
        case 5: // ORDER_NO
          return ORDER_NO;
        case 6: // PNR_LIMIT
          return PNR_LIMIT;
        case 7: // ERROR
          return ERROR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.MSG,_Fields.PNR_LARGE_CODE,_Fields.ERROR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PNR, new org.apache.thrift.meta_data.FieldMetaData("pnr", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PNR_LARGE_CODE, new org.apache.thrift.meta_data.FieldMetaData("pnrLargeCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_NO, new org.apache.thrift.meta_data.FieldMetaData("orderNo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PNR_LIMIT, new org.apache.thrift.meta_data.FieldMetaData("pnrLimit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.intlgds.amadeus.booking.error.AmadeusBookingErrorTable.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AmadeusBookingResponse.class, metaDataMap);
  }

  public AmadeusBookingResponse() {
  }

  public AmadeusBookingResponse(
    String status,
    String pnr,
    String orderNo,
    String pnrLimit)
  {
    this();
    this.status = status;
    this.pnr = pnr;
    this.orderNo = orderNo;
    this.pnrLimit = pnrLimit;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AmadeusBookingResponse(AmadeusBookingResponse other) {
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetMsg()) {
      this.msg = other.msg;
    }
    if (other.isSetPnr()) {
      this.pnr = other.pnr;
    }
    if (other.isSetPnrLargeCode()) {
      this.pnrLargeCode = other.pnrLargeCode;
    }
    if (other.isSetOrderNo()) {
      this.orderNo = other.orderNo;
    }
    if (other.isSetPnrLimit()) {
      this.pnrLimit = other.pnrLimit;
    }
    if (other.isSetError()) {
      this.error = new com.intlgds.amadeus.booking.error.AmadeusBookingErrorTable(other.error);
    }
  }

  public AmadeusBookingResponse deepCopy() {
    return new AmadeusBookingResponse(this);
  }

  @Override
  public void clear() {
    this.status = null;
    this.msg = null;
    this.pnr = null;
    this.pnrLargeCode = null;
    this.orderNo = null;
    this.pnrLimit = null;
    this.error = null;
  }

  public String getStatus() {
    return this.status;
  }

  public AmadeusBookingResponse setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getMsg() {
    return this.msg;
  }

  public AmadeusBookingResponse setMsg(String msg) {
    this.msg = msg;
    return this;
  }

  public void unsetMsg() {
    this.msg = null;
  }

  /** Returns true if field msg is set (has been assigned a value) and false otherwise */
  public boolean isSetMsg() {
    return this.msg != null;
  }

  public void setMsgIsSet(boolean value) {
    if (!value) {
      this.msg = null;
    }
  }

  public String getPnr() {
    return this.pnr;
  }

  public AmadeusBookingResponse setPnr(String pnr) {
    this.pnr = pnr;
    return this;
  }

  public void unsetPnr() {
    this.pnr = null;
  }

  /** Returns true if field pnr is set (has been assigned a value) and false otherwise */
  public boolean isSetPnr() {
    return this.pnr != null;
  }

  public void setPnrIsSet(boolean value) {
    if (!value) {
      this.pnr = null;
    }
  }

  public String getPnrLargeCode() {
    return this.pnrLargeCode;
  }

  public AmadeusBookingResponse setPnrLargeCode(String pnrLargeCode) {
    this.pnrLargeCode = pnrLargeCode;
    return this;
  }

  public void unsetPnrLargeCode() {
    this.pnrLargeCode = null;
  }

  /** Returns true if field pnrLargeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPnrLargeCode() {
    return this.pnrLargeCode != null;
  }

  public void setPnrLargeCodeIsSet(boolean value) {
    if (!value) {
      this.pnrLargeCode = null;
    }
  }

  public String getOrderNo() {
    return this.orderNo;
  }

  public AmadeusBookingResponse setOrderNo(String orderNo) {
    this.orderNo = orderNo;
    return this;
  }

  public void unsetOrderNo() {
    this.orderNo = null;
  }

  /** Returns true if field orderNo is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderNo() {
    return this.orderNo != null;
  }

  public void setOrderNoIsSet(boolean value) {
    if (!value) {
      this.orderNo = null;
    }
  }

  public String getPnrLimit() {
    return this.pnrLimit;
  }

  public AmadeusBookingResponse setPnrLimit(String pnrLimit) {
    this.pnrLimit = pnrLimit;
    return this;
  }

  public void unsetPnrLimit() {
    this.pnrLimit = null;
  }

  /** Returns true if field pnrLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetPnrLimit() {
    return this.pnrLimit != null;
  }

  public void setPnrLimitIsSet(boolean value) {
    if (!value) {
      this.pnrLimit = null;
    }
  }

  public com.intlgds.amadeus.booking.error.AmadeusBookingErrorTable getError() {
    return this.error;
  }

  public AmadeusBookingResponse setError(com.intlgds.amadeus.booking.error.AmadeusBookingErrorTable error) {
    this.error = error;
    return this;
  }

  public void unsetError() {
    this.error = null;
  }

  /** Returns true if field error is set (has been assigned a value) and false otherwise */
  public boolean isSetError() {
    return this.error != null;
  }

  public void setErrorIsSet(boolean value) {
    if (!value) {
      this.error = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case MSG:
      if (value == null) {
        unsetMsg();
      } else {
        setMsg((String)value);
      }
      break;

    case PNR:
      if (value == null) {
        unsetPnr();
      } else {
        setPnr((String)value);
      }
      break;

    case PNR_LARGE_CODE:
      if (value == null) {
        unsetPnrLargeCode();
      } else {
        setPnrLargeCode((String)value);
      }
      break;

    case ORDER_NO:
      if (value == null) {
        unsetOrderNo();
      } else {
        setOrderNo((String)value);
      }
      break;

    case PNR_LIMIT:
      if (value == null) {
        unsetPnrLimit();
      } else {
        setPnrLimit((String)value);
      }
      break;

    case ERROR:
      if (value == null) {
        unsetError();
      } else {
        setError((com.intlgds.amadeus.booking.error.AmadeusBookingErrorTable)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case MSG:
      return getMsg();

    case PNR:
      return getPnr();

    case PNR_LARGE_CODE:
      return getPnrLargeCode();

    case ORDER_NO:
      return getOrderNo();

    case PNR_LIMIT:
      return getPnrLimit();

    case ERROR:
      return getError();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case MSG:
      return isSetMsg();
    case PNR:
      return isSetPnr();
    case PNR_LARGE_CODE:
      return isSetPnrLargeCode();
    case ORDER_NO:
      return isSetOrderNo();
    case PNR_LIMIT:
      return isSetPnrLimit();
    case ERROR:
      return isSetError();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AmadeusBookingResponse)
      return this.equals((AmadeusBookingResponse)that);
    return false;
  }

  public boolean equals(AmadeusBookingResponse that) {
    if (that == null)
      return false;

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_msg = true && this.isSetMsg();
    boolean that_present_msg = true && that.isSetMsg();
    if (this_present_msg || that_present_msg) {
      if (!(this_present_msg && that_present_msg))
        return false;
      if (!this.msg.equals(that.msg))
        return false;
    }

    boolean this_present_pnr = true && this.isSetPnr();
    boolean that_present_pnr = true && that.isSetPnr();
    if (this_present_pnr || that_present_pnr) {
      if (!(this_present_pnr && that_present_pnr))
        return false;
      if (!this.pnr.equals(that.pnr))
        return false;
    }

    boolean this_present_pnrLargeCode = true && this.isSetPnrLargeCode();
    boolean that_present_pnrLargeCode = true && that.isSetPnrLargeCode();
    if (this_present_pnrLargeCode || that_present_pnrLargeCode) {
      if (!(this_present_pnrLargeCode && that_present_pnrLargeCode))
        return false;
      if (!this.pnrLargeCode.equals(that.pnrLargeCode))
        return false;
    }

    boolean this_present_orderNo = true && this.isSetOrderNo();
    boolean that_present_orderNo = true && that.isSetOrderNo();
    if (this_present_orderNo || that_present_orderNo) {
      if (!(this_present_orderNo && that_present_orderNo))
        return false;
      if (!this.orderNo.equals(that.orderNo))
        return false;
    }

    boolean this_present_pnrLimit = true && this.isSetPnrLimit();
    boolean that_present_pnrLimit = true && that.isSetPnrLimit();
    if (this_present_pnrLimit || that_present_pnrLimit) {
      if (!(this_present_pnrLimit && that_present_pnrLimit))
        return false;
      if (!this.pnrLimit.equals(that.pnrLimit))
        return false;
    }

    boolean this_present_error = true && this.isSetError();
    boolean that_present_error = true && that.isSetError();
    if (this_present_error || that_present_error) {
      if (!(this_present_error && that_present_error))
        return false;
      if (!this.error.equals(that.error))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(AmadeusBookingResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    AmadeusBookingResponse typedOther = (AmadeusBookingResponse)other;

    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(typedOther.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, typedOther.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsg()).compareTo(typedOther.isSetMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, typedOther.msg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPnr()).compareTo(typedOther.isSetPnr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPnr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pnr, typedOther.pnr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPnrLargeCode()).compareTo(typedOther.isSetPnrLargeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPnrLargeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pnrLargeCode, typedOther.pnrLargeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderNo()).compareTo(typedOther.isSetOrderNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNo, typedOther.orderNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPnrLimit()).compareTo(typedOther.isSetPnrLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPnrLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pnrLimit, typedOther.pnrLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetError()).compareTo(typedOther.isSetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, typedOther.error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AmadeusBookingResponse(");
    boolean first = true;

    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetMsg()) {
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("pnr:");
    if (this.pnr == null) {
      sb.append("null");
    } else {
      sb.append(this.pnr);
    }
    first = false;
    if (isSetPnrLargeCode()) {
      if (!first) sb.append(", ");
      sb.append("pnrLargeCode:");
      if (this.pnrLargeCode == null) {
        sb.append("null");
      } else {
        sb.append(this.pnrLargeCode);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("orderNo:");
    if (this.orderNo == null) {
      sb.append("null");
    } else {
      sb.append(this.orderNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pnrLimit:");
    if (this.pnrLimit == null) {
      sb.append("null");
    } else {
      sb.append(this.pnrLimit);
    }
    first = false;
    if (isSetError()) {
      if (!first) sb.append(", ");
      sb.append("error:");
      if (this.error == null) {
        sb.append("null");
      } else {
        sb.append(this.error);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    if (pnr == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pnr' was not present! Struct: " + toString());
    }
    if (orderNo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'orderNo' was not present! Struct: " + toString());
    }
    if (pnrLimit == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pnrLimit' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (error != null) {
      error.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AmadeusBookingResponseStandardSchemeFactory implements SchemeFactory {
    public AmadeusBookingResponseStandardScheme getScheme() {
      return new AmadeusBookingResponseStandardScheme();
    }
  }

  private static class AmadeusBookingResponseStandardScheme extends StandardScheme<AmadeusBookingResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AmadeusBookingResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msg = iprot.readString();
              struct.setMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PNR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pnr = iprot.readString();
              struct.setPnrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PNR_LARGE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pnrLargeCode = iprot.readString();
              struct.setPnrLargeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORDER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderNo = iprot.readString();
              struct.setOrderNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PNR_LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pnrLimit = iprot.readString();
              struct.setPnrLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.error = new com.intlgds.amadeus.booking.error.AmadeusBookingErrorTable();
              struct.error.read(iprot);
              struct.setErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AmadeusBookingResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.msg != null) {
        if (struct.isSetMsg()) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.pnr != null) {
        oprot.writeFieldBegin(PNR_FIELD_DESC);
        oprot.writeString(struct.pnr);
        oprot.writeFieldEnd();
      }
      if (struct.pnrLargeCode != null) {
        if (struct.isSetPnrLargeCode()) {
          oprot.writeFieldBegin(PNR_LARGE_CODE_FIELD_DESC);
          oprot.writeString(struct.pnrLargeCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderNo != null) {
        oprot.writeFieldBegin(ORDER_NO_FIELD_DESC);
        oprot.writeString(struct.orderNo);
        oprot.writeFieldEnd();
      }
      if (struct.pnrLimit != null) {
        oprot.writeFieldBegin(PNR_LIMIT_FIELD_DESC);
        oprot.writeString(struct.pnrLimit);
        oprot.writeFieldEnd();
      }
      if (struct.error != null) {
        if (struct.isSetError()) {
          oprot.writeFieldBegin(ERROR_FIELD_DESC);
          struct.error.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AmadeusBookingResponseTupleSchemeFactory implements SchemeFactory {
    public AmadeusBookingResponseTupleScheme getScheme() {
      return new AmadeusBookingResponseTupleScheme();
    }
  }

  private static class AmadeusBookingResponseTupleScheme extends TupleScheme<AmadeusBookingResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AmadeusBookingResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.status);
      oprot.writeString(struct.pnr);
      oprot.writeString(struct.orderNo);
      oprot.writeString(struct.pnrLimit);
      BitSet optionals = new BitSet();
      if (struct.isSetMsg()) {
        optionals.set(0);
      }
      if (struct.isSetPnrLargeCode()) {
        optionals.set(1);
      }
      if (struct.isSetError()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMsg()) {
        oprot.writeString(struct.msg);
      }
      if (struct.isSetPnrLargeCode()) {
        oprot.writeString(struct.pnrLargeCode);
      }
      if (struct.isSetError()) {
        struct.error.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AmadeusBookingResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.status = iprot.readString();
      struct.setStatusIsSet(true);
      struct.pnr = iprot.readString();
      struct.setPnrIsSet(true);
      struct.orderNo = iprot.readString();
      struct.setOrderNoIsSet(true);
      struct.pnrLimit = iprot.readString();
      struct.setPnrLimitIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.msg = iprot.readString();
        struct.setMsgIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pnrLargeCode = iprot.readString();
        struct.setPnrLargeCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.error = new com.intlgds.amadeus.booking.error.AmadeusBookingErrorTable();
        struct.error.read(iprot);
        struct.setErrorIsSet(true);
      }
    }
  }

}

