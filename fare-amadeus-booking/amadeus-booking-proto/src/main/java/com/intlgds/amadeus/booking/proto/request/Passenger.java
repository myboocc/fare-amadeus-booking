/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.intlgds.amadeus.booking.proto.request;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Passenger implements org.apache.thrift.TBase<Passenger, Passenger._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Passenger");

  private static final org.apache.thrift.protocol.TField PASSENGER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("passengerType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("birthday", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NATIONALITY_FIELD_DESC = new org.apache.thrift.protocol.TField("nationality", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cardType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CARD_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("cardNo", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CARD_ISSUE_PLACE_FIELD_DESC = new org.apache.thrift.protocol.TField("cardIssuePlace", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CARD_EXPIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("cardExpired", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PassengerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PassengerTupleSchemeFactory());
  }

  public String passengerType; // required
  public String name; // required
  public String sex; // required
  public String birthday; // required
  public String nationality; // required
  public String cardType; // required
  public String cardNo; // required
  public String cardIssuePlace; // required
  public String cardExpired; // required
  public String phone; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PASSENGER_TYPE((short)1, "passengerType"),
    NAME((short)2, "name"),
    SEX((short)3, "sex"),
    BIRTHDAY((short)4, "birthday"),
    NATIONALITY((short)5, "nationality"),
    CARD_TYPE((short)6, "cardType"),
    CARD_NO((short)7, "cardNo"),
    CARD_ISSUE_PLACE((short)8, "cardIssuePlace"),
    CARD_EXPIRED((short)9, "cardExpired"),
    PHONE((short)10, "phone");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PASSENGER_TYPE
          return PASSENGER_TYPE;
        case 2: // NAME
          return NAME;
        case 3: // SEX
          return SEX;
        case 4: // BIRTHDAY
          return BIRTHDAY;
        case 5: // NATIONALITY
          return NATIONALITY;
        case 6: // CARD_TYPE
          return CARD_TYPE;
        case 7: // CARD_NO
          return CARD_NO;
        case 8: // CARD_ISSUE_PLACE
          return CARD_ISSUE_PLACE;
        case 9: // CARD_EXPIRED
          return CARD_EXPIRED;
        case 10: // PHONE
          return PHONE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PASSENGER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("passengerType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("birthday", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NATIONALITY, new org.apache.thrift.meta_data.FieldMetaData("nationality", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cardType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_NO, new org.apache.thrift.meta_data.FieldMetaData("cardNo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_ISSUE_PLACE, new org.apache.thrift.meta_data.FieldMetaData("cardIssuePlace", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_EXPIRED, new org.apache.thrift.meta_data.FieldMetaData("cardExpired", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Passenger.class, metaDataMap);
  }

  public Passenger() {
  }

  public Passenger(
    String passengerType,
    String name,
    String sex,
    String birthday,
    String nationality,
    String cardType,
    String cardNo,
    String cardIssuePlace,
    String cardExpired,
    String phone)
  {
    this();
    this.passengerType = passengerType;
    this.name = name;
    this.sex = sex;
    this.birthday = birthday;
    this.nationality = nationality;
    this.cardType = cardType;
    this.cardNo = cardNo;
    this.cardIssuePlace = cardIssuePlace;
    this.cardExpired = cardExpired;
    this.phone = phone;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Passenger(Passenger other) {
    if (other.isSetPassengerType()) {
      this.passengerType = other.passengerType;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetSex()) {
      this.sex = other.sex;
    }
    if (other.isSetBirthday()) {
      this.birthday = other.birthday;
    }
    if (other.isSetNationality()) {
      this.nationality = other.nationality;
    }
    if (other.isSetCardType()) {
      this.cardType = other.cardType;
    }
    if (other.isSetCardNo()) {
      this.cardNo = other.cardNo;
    }
    if (other.isSetCardIssuePlace()) {
      this.cardIssuePlace = other.cardIssuePlace;
    }
    if (other.isSetCardExpired()) {
      this.cardExpired = other.cardExpired;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
  }

  public Passenger deepCopy() {
    return new Passenger(this);
  }

  @Override
  public void clear() {
    this.passengerType = null;
    this.name = null;
    this.sex = null;
    this.birthday = null;
    this.nationality = null;
    this.cardType = null;
    this.cardNo = null;
    this.cardIssuePlace = null;
    this.cardExpired = null;
    this.phone = null;
  }

  public String getPassengerType() {
    return this.passengerType;
  }

  public Passenger setPassengerType(String passengerType) {
    this.passengerType = passengerType;
    return this;
  }

  public void unsetPassengerType() {
    this.passengerType = null;
  }

  /** Returns true if field passengerType is set (has been assigned a value) and false otherwise */
  public boolean isSetPassengerType() {
    return this.passengerType != null;
  }

  public void setPassengerTypeIsSet(boolean value) {
    if (!value) {
      this.passengerType = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public Passenger setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getSex() {
    return this.sex;
  }

  public Passenger setSex(String sex) {
    this.sex = sex;
    return this;
  }

  public void unsetSex() {
    this.sex = null;
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return this.sex != null;
  }

  public void setSexIsSet(boolean value) {
    if (!value) {
      this.sex = null;
    }
  }

  public String getBirthday() {
    return this.birthday;
  }

  public Passenger setBirthday(String birthday) {
    this.birthday = birthday;
    return this;
  }

  public void unsetBirthday() {
    this.birthday = null;
  }

  /** Returns true if field birthday is set (has been assigned a value) and false otherwise */
  public boolean isSetBirthday() {
    return this.birthday != null;
  }

  public void setBirthdayIsSet(boolean value) {
    if (!value) {
      this.birthday = null;
    }
  }

  public String getNationality() {
    return this.nationality;
  }

  public Passenger setNationality(String nationality) {
    this.nationality = nationality;
    return this;
  }

  public void unsetNationality() {
    this.nationality = null;
  }

  /** Returns true if field nationality is set (has been assigned a value) and false otherwise */
  public boolean isSetNationality() {
    return this.nationality != null;
  }

  public void setNationalityIsSet(boolean value) {
    if (!value) {
      this.nationality = null;
    }
  }

  public String getCardType() {
    return this.cardType;
  }

  public Passenger setCardType(String cardType) {
    this.cardType = cardType;
    return this;
  }

  public void unsetCardType() {
    this.cardType = null;
  }

  /** Returns true if field cardType is set (has been assigned a value) and false otherwise */
  public boolean isSetCardType() {
    return this.cardType != null;
  }

  public void setCardTypeIsSet(boolean value) {
    if (!value) {
      this.cardType = null;
    }
  }

  public String getCardNo() {
    return this.cardNo;
  }

  public Passenger setCardNo(String cardNo) {
    this.cardNo = cardNo;
    return this;
  }

  public void unsetCardNo() {
    this.cardNo = null;
  }

  /** Returns true if field cardNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCardNo() {
    return this.cardNo != null;
  }

  public void setCardNoIsSet(boolean value) {
    if (!value) {
      this.cardNo = null;
    }
  }

  public String getCardIssuePlace() {
    return this.cardIssuePlace;
  }

  public Passenger setCardIssuePlace(String cardIssuePlace) {
    this.cardIssuePlace = cardIssuePlace;
    return this;
  }

  public void unsetCardIssuePlace() {
    this.cardIssuePlace = null;
  }

  /** Returns true if field cardIssuePlace is set (has been assigned a value) and false otherwise */
  public boolean isSetCardIssuePlace() {
    return this.cardIssuePlace != null;
  }

  public void setCardIssuePlaceIsSet(boolean value) {
    if (!value) {
      this.cardIssuePlace = null;
    }
  }

  public String getCardExpired() {
    return this.cardExpired;
  }

  public Passenger setCardExpired(String cardExpired) {
    this.cardExpired = cardExpired;
    return this;
  }

  public void unsetCardExpired() {
    this.cardExpired = null;
  }

  /** Returns true if field cardExpired is set (has been assigned a value) and false otherwise */
  public boolean isSetCardExpired() {
    return this.cardExpired != null;
  }

  public void setCardExpiredIsSet(boolean value) {
    if (!value) {
      this.cardExpired = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public Passenger setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PASSENGER_TYPE:
      if (value == null) {
        unsetPassengerType();
      } else {
        setPassengerType((String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((String)value);
      }
      break;

    case BIRTHDAY:
      if (value == null) {
        unsetBirthday();
      } else {
        setBirthday((String)value);
      }
      break;

    case NATIONALITY:
      if (value == null) {
        unsetNationality();
      } else {
        setNationality((String)value);
      }
      break;

    case CARD_TYPE:
      if (value == null) {
        unsetCardType();
      } else {
        setCardType((String)value);
      }
      break;

    case CARD_NO:
      if (value == null) {
        unsetCardNo();
      } else {
        setCardNo((String)value);
      }
      break;

    case CARD_ISSUE_PLACE:
      if (value == null) {
        unsetCardIssuePlace();
      } else {
        setCardIssuePlace((String)value);
      }
      break;

    case CARD_EXPIRED:
      if (value == null) {
        unsetCardExpired();
      } else {
        setCardExpired((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PASSENGER_TYPE:
      return getPassengerType();

    case NAME:
      return getName();

    case SEX:
      return getSex();

    case BIRTHDAY:
      return getBirthday();

    case NATIONALITY:
      return getNationality();

    case CARD_TYPE:
      return getCardType();

    case CARD_NO:
      return getCardNo();

    case CARD_ISSUE_PLACE:
      return getCardIssuePlace();

    case CARD_EXPIRED:
      return getCardExpired();

    case PHONE:
      return getPhone();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PASSENGER_TYPE:
      return isSetPassengerType();
    case NAME:
      return isSetName();
    case SEX:
      return isSetSex();
    case BIRTHDAY:
      return isSetBirthday();
    case NATIONALITY:
      return isSetNationality();
    case CARD_TYPE:
      return isSetCardType();
    case CARD_NO:
      return isSetCardNo();
    case CARD_ISSUE_PLACE:
      return isSetCardIssuePlace();
    case CARD_EXPIRED:
      return isSetCardExpired();
    case PHONE:
      return isSetPhone();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Passenger)
      return this.equals((Passenger)that);
    return false;
  }

  public boolean equals(Passenger that) {
    if (that == null)
      return false;

    boolean this_present_passengerType = true && this.isSetPassengerType();
    boolean that_present_passengerType = true && that.isSetPassengerType();
    if (this_present_passengerType || that_present_passengerType) {
      if (!(this_present_passengerType && that_present_passengerType))
        return false;
      if (!this.passengerType.equals(that.passengerType))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_sex = true && this.isSetSex();
    boolean that_present_sex = true && that.isSetSex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (!this.sex.equals(that.sex))
        return false;
    }

    boolean this_present_birthday = true && this.isSetBirthday();
    boolean that_present_birthday = true && that.isSetBirthday();
    if (this_present_birthday || that_present_birthday) {
      if (!(this_present_birthday && that_present_birthday))
        return false;
      if (!this.birthday.equals(that.birthday))
        return false;
    }

    boolean this_present_nationality = true && this.isSetNationality();
    boolean that_present_nationality = true && that.isSetNationality();
    if (this_present_nationality || that_present_nationality) {
      if (!(this_present_nationality && that_present_nationality))
        return false;
      if (!this.nationality.equals(that.nationality))
        return false;
    }

    boolean this_present_cardType = true && this.isSetCardType();
    boolean that_present_cardType = true && that.isSetCardType();
    if (this_present_cardType || that_present_cardType) {
      if (!(this_present_cardType && that_present_cardType))
        return false;
      if (!this.cardType.equals(that.cardType))
        return false;
    }

    boolean this_present_cardNo = true && this.isSetCardNo();
    boolean that_present_cardNo = true && that.isSetCardNo();
    if (this_present_cardNo || that_present_cardNo) {
      if (!(this_present_cardNo && that_present_cardNo))
        return false;
      if (!this.cardNo.equals(that.cardNo))
        return false;
    }

    boolean this_present_cardIssuePlace = true && this.isSetCardIssuePlace();
    boolean that_present_cardIssuePlace = true && that.isSetCardIssuePlace();
    if (this_present_cardIssuePlace || that_present_cardIssuePlace) {
      if (!(this_present_cardIssuePlace && that_present_cardIssuePlace))
        return false;
      if (!this.cardIssuePlace.equals(that.cardIssuePlace))
        return false;
    }

    boolean this_present_cardExpired = true && this.isSetCardExpired();
    boolean that_present_cardExpired = true && that.isSetCardExpired();
    if (this_present_cardExpired || that_present_cardExpired) {
      if (!(this_present_cardExpired && that_present_cardExpired))
        return false;
      if (!this.cardExpired.equals(that.cardExpired))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Passenger other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Passenger typedOther = (Passenger)other;

    lastComparison = Boolean.valueOf(isSetPassengerType()).compareTo(typedOther.isSetPassengerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassengerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passengerType, typedOther.passengerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(typedOther.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, typedOther.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBirthday()).compareTo(typedOther.isSetBirthday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBirthday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.birthday, typedOther.birthday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNationality()).compareTo(typedOther.isSetNationality());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNationality()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nationality, typedOther.nationality);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardType()).compareTo(typedOther.isSetCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardType, typedOther.cardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardNo()).compareTo(typedOther.isSetCardNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardNo, typedOther.cardNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardIssuePlace()).compareTo(typedOther.isSetCardIssuePlace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardIssuePlace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardIssuePlace, typedOther.cardIssuePlace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCardExpired()).compareTo(typedOther.isSetCardExpired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardExpired()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardExpired, typedOther.cardExpired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(typedOther.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, typedOther.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Passenger(");
    boolean first = true;

    sb.append("passengerType:");
    if (this.passengerType == null) {
      sb.append("null");
    } else {
      sb.append(this.passengerType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    if (this.sex == null) {
      sb.append("null");
    } else {
      sb.append(this.sex);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("birthday:");
    if (this.birthday == null) {
      sb.append("null");
    } else {
      sb.append(this.birthday);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nationality:");
    if (this.nationality == null) {
      sb.append("null");
    } else {
      sb.append(this.nationality);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardType:");
    if (this.cardType == null) {
      sb.append("null");
    } else {
      sb.append(this.cardType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardNo:");
    if (this.cardNo == null) {
      sb.append("null");
    } else {
      sb.append(this.cardNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardIssuePlace:");
    if (this.cardIssuePlace == null) {
      sb.append("null");
    } else {
      sb.append(this.cardIssuePlace);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cardExpired:");
    if (this.cardExpired == null) {
      sb.append("null");
    } else {
      sb.append(this.cardExpired);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (passengerType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'passengerType' was not present! Struct: " + toString());
    }
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (sex == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'sex' was not present! Struct: " + toString());
    }
    if (birthday == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'birthday' was not present! Struct: " + toString());
    }
    if (nationality == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'nationality' was not present! Struct: " + toString());
    }
    if (cardType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cardType' was not present! Struct: " + toString());
    }
    if (cardNo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cardNo' was not present! Struct: " + toString());
    }
    if (cardIssuePlace == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cardIssuePlace' was not present! Struct: " + toString());
    }
    if (cardExpired == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cardExpired' was not present! Struct: " + toString());
    }
    if (phone == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'phone' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PassengerStandardSchemeFactory implements SchemeFactory {
    public PassengerStandardScheme getScheme() {
      return new PassengerStandardScheme();
    }
  }

  private static class PassengerStandardScheme extends StandardScheme<Passenger> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Passenger struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PASSENGER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.passengerType = iprot.readString();
              struct.setPassengerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sex = iprot.readString();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.birthday = iprot.readString();
              struct.setBirthdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NATIONALITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nationality = iprot.readString();
              struct.setNationalityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardType = iprot.readString();
              struct.setCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CARD_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardNo = iprot.readString();
              struct.setCardNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CARD_ISSUE_PLACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardIssuePlace = iprot.readString();
              struct.setCardIssuePlaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CARD_EXPIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardExpired = iprot.readString();
              struct.setCardExpiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Passenger struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.passengerType != null) {
        oprot.writeFieldBegin(PASSENGER_TYPE_FIELD_DESC);
        oprot.writeString(struct.passengerType);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.sex != null) {
        oprot.writeFieldBegin(SEX_FIELD_DESC);
        oprot.writeString(struct.sex);
        oprot.writeFieldEnd();
      }
      if (struct.birthday != null) {
        oprot.writeFieldBegin(BIRTHDAY_FIELD_DESC);
        oprot.writeString(struct.birthday);
        oprot.writeFieldEnd();
      }
      if (struct.nationality != null) {
        oprot.writeFieldBegin(NATIONALITY_FIELD_DESC);
        oprot.writeString(struct.nationality);
        oprot.writeFieldEnd();
      }
      if (struct.cardType != null) {
        oprot.writeFieldBegin(CARD_TYPE_FIELD_DESC);
        oprot.writeString(struct.cardType);
        oprot.writeFieldEnd();
      }
      if (struct.cardNo != null) {
        oprot.writeFieldBegin(CARD_NO_FIELD_DESC);
        oprot.writeString(struct.cardNo);
        oprot.writeFieldEnd();
      }
      if (struct.cardIssuePlace != null) {
        oprot.writeFieldBegin(CARD_ISSUE_PLACE_FIELD_DESC);
        oprot.writeString(struct.cardIssuePlace);
        oprot.writeFieldEnd();
      }
      if (struct.cardExpired != null) {
        oprot.writeFieldBegin(CARD_EXPIRED_FIELD_DESC);
        oprot.writeString(struct.cardExpired);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PassengerTupleSchemeFactory implements SchemeFactory {
    public PassengerTupleScheme getScheme() {
      return new PassengerTupleScheme();
    }
  }

  private static class PassengerTupleScheme extends TupleScheme<Passenger> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Passenger struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.passengerType);
      oprot.writeString(struct.name);
      oprot.writeString(struct.sex);
      oprot.writeString(struct.birthday);
      oprot.writeString(struct.nationality);
      oprot.writeString(struct.cardType);
      oprot.writeString(struct.cardNo);
      oprot.writeString(struct.cardIssuePlace);
      oprot.writeString(struct.cardExpired);
      oprot.writeString(struct.phone);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Passenger struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.passengerType = iprot.readString();
      struct.setPassengerTypeIsSet(true);
      struct.name = iprot.readString();
      struct.setNameIsSet(true);
      struct.sex = iprot.readString();
      struct.setSexIsSet(true);
      struct.birthday = iprot.readString();
      struct.setBirthdayIsSet(true);
      struct.nationality = iprot.readString();
      struct.setNationalityIsSet(true);
      struct.cardType = iprot.readString();
      struct.setCardTypeIsSet(true);
      struct.cardNo = iprot.readString();
      struct.setCardNoIsSet(true);
      struct.cardIssuePlace = iprot.readString();
      struct.setCardIssuePlaceIsSet(true);
      struct.cardExpired = iprot.readString();
      struct.setCardExpiredIsSet(true);
      struct.phone = iprot.readString();
      struct.setPhoneIsSet(true);
    }
  }

}

