/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.intlgds.amadeus.booking.proto.request;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PassengerPrice implements org.apache.thrift.TBase<PassengerPrice, PassengerPrice._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PassengerPrice");

  private static final org.apache.thrift.protocol.TField PASSENGER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("passengerType", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PASSGER_IDENTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("passgerIdentity", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BASE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("basePrice", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("commission", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REWARD_MONEY_FIELD_DESC = new org.apache.thrift.protocol.TField("rewardMoney", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SALE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("salePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField TAX_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("taxAmount", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PassengerPriceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PassengerPriceTupleSchemeFactory());
  }

  public String passengerType; // required
  public int passgerIdentity; // optional
  public int basePrice; // required
  public String commission; // required
  public String rewardMoney; // required
  public double salePrice; // optional
  public int taxAmount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PASSENGER_TYPE((short)1, "passengerType"),
    PASSGER_IDENTITY((short)2, "passgerIdentity"),
    BASE_PRICE((short)3, "basePrice"),
    COMMISSION((short)4, "commission"),
    REWARD_MONEY((short)5, "rewardMoney"),
    SALE_PRICE((short)6, "salePrice"),
    TAX_AMOUNT((short)7, "taxAmount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PASSENGER_TYPE
          return PASSENGER_TYPE;
        case 2: // PASSGER_IDENTITY
          return PASSGER_IDENTITY;
        case 3: // BASE_PRICE
          return BASE_PRICE;
        case 4: // COMMISSION
          return COMMISSION;
        case 5: // REWARD_MONEY
          return REWARD_MONEY;
        case 6: // SALE_PRICE
          return SALE_PRICE;
        case 7: // TAX_AMOUNT
          return TAX_AMOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PASSGERIDENTITY_ISSET_ID = 0;
  private static final int __BASEPRICE_ISSET_ID = 1;
  private static final int __SALEPRICE_ISSET_ID = 2;
  private static final int __TAXAMOUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PASSGER_IDENTITY,_Fields.SALE_PRICE,_Fields.TAX_AMOUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PASSENGER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("passengerType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSGER_IDENTITY, new org.apache.thrift.meta_data.FieldMetaData("passgerIdentity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BASE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("basePrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("commission", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REWARD_MONEY, new org.apache.thrift.meta_data.FieldMetaData("rewardMoney", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SALE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("salePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TAX_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("taxAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PassengerPrice.class, metaDataMap);
  }

  public PassengerPrice() {
  }

  public PassengerPrice(
    String passengerType,
    int basePrice,
    String commission,
    String rewardMoney)
  {
    this();
    this.passengerType = passengerType;
    this.basePrice = basePrice;
    setBasePriceIsSet(true);
    this.commission = commission;
    this.rewardMoney = rewardMoney;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PassengerPrice(PassengerPrice other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPassengerType()) {
      this.passengerType = other.passengerType;
    }
    this.passgerIdentity = other.passgerIdentity;
    this.basePrice = other.basePrice;
    if (other.isSetCommission()) {
      this.commission = other.commission;
    }
    if (other.isSetRewardMoney()) {
      this.rewardMoney = other.rewardMoney;
    }
    this.salePrice = other.salePrice;
    this.taxAmount = other.taxAmount;
  }

  public PassengerPrice deepCopy() {
    return new PassengerPrice(this);
  }

  @Override
  public void clear() {
    this.passengerType = null;
    setPassgerIdentityIsSet(false);
    this.passgerIdentity = 0;
    setBasePriceIsSet(false);
    this.basePrice = 0;
    this.commission = null;
    this.rewardMoney = null;
    setSalePriceIsSet(false);
    this.salePrice = 0.0;
    setTaxAmountIsSet(false);
    this.taxAmount = 0;
  }

  public String getPassengerType() {
    return this.passengerType;
  }

  public PassengerPrice setPassengerType(String passengerType) {
    this.passengerType = passengerType;
    return this;
  }

  public void unsetPassengerType() {
    this.passengerType = null;
  }

  /** Returns true if field passengerType is set (has been assigned a value) and false otherwise */
  public boolean isSetPassengerType() {
    return this.passengerType != null;
  }

  public void setPassengerTypeIsSet(boolean value) {
    if (!value) {
      this.passengerType = null;
    }
  }

  public int getPassgerIdentity() {
    return this.passgerIdentity;
  }

  public PassengerPrice setPassgerIdentity(int passgerIdentity) {
    this.passgerIdentity = passgerIdentity;
    setPassgerIdentityIsSet(true);
    return this;
  }

  public void unsetPassgerIdentity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PASSGERIDENTITY_ISSET_ID);
  }

  /** Returns true if field passgerIdentity is set (has been assigned a value) and false otherwise */
  public boolean isSetPassgerIdentity() {
    return EncodingUtils.testBit(__isset_bitfield, __PASSGERIDENTITY_ISSET_ID);
  }

  public void setPassgerIdentityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PASSGERIDENTITY_ISSET_ID, value);
  }

  public int getBasePrice() {
    return this.basePrice;
  }

  public PassengerPrice setBasePrice(int basePrice) {
    this.basePrice = basePrice;
    setBasePriceIsSet(true);
    return this;
  }

  public void unsetBasePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BASEPRICE_ISSET_ID);
  }

  /** Returns true if field basePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetBasePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __BASEPRICE_ISSET_ID);
  }

  public void setBasePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BASEPRICE_ISSET_ID, value);
  }

  public String getCommission() {
    return this.commission;
  }

  public PassengerPrice setCommission(String commission) {
    this.commission = commission;
    return this;
  }

  public void unsetCommission() {
    this.commission = null;
  }

  /** Returns true if field commission is set (has been assigned a value) and false otherwise */
  public boolean isSetCommission() {
    return this.commission != null;
  }

  public void setCommissionIsSet(boolean value) {
    if (!value) {
      this.commission = null;
    }
  }

  public String getRewardMoney() {
    return this.rewardMoney;
  }

  public PassengerPrice setRewardMoney(String rewardMoney) {
    this.rewardMoney = rewardMoney;
    return this;
  }

  public void unsetRewardMoney() {
    this.rewardMoney = null;
  }

  /** Returns true if field rewardMoney is set (has been assigned a value) and false otherwise */
  public boolean isSetRewardMoney() {
    return this.rewardMoney != null;
  }

  public void setRewardMoneyIsSet(boolean value) {
    if (!value) {
      this.rewardMoney = null;
    }
  }

  public double getSalePrice() {
    return this.salePrice;
  }

  public PassengerPrice setSalePrice(double salePrice) {
    this.salePrice = salePrice;
    setSalePriceIsSet(true);
    return this;
  }

  public void unsetSalePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SALEPRICE_ISSET_ID);
  }

  /** Returns true if field salePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetSalePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __SALEPRICE_ISSET_ID);
  }

  public void setSalePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SALEPRICE_ISSET_ID, value);
  }

  public int getTaxAmount() {
    return this.taxAmount;
  }

  public PassengerPrice setTaxAmount(int taxAmount) {
    this.taxAmount = taxAmount;
    setTaxAmountIsSet(true);
    return this;
  }

  public void unsetTaxAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TAXAMOUNT_ISSET_ID);
  }

  /** Returns true if field taxAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTaxAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TAXAMOUNT_ISSET_ID);
  }

  public void setTaxAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TAXAMOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PASSENGER_TYPE:
      if (value == null) {
        unsetPassengerType();
      } else {
        setPassengerType((String)value);
      }
      break;

    case PASSGER_IDENTITY:
      if (value == null) {
        unsetPassgerIdentity();
      } else {
        setPassgerIdentity((Integer)value);
      }
      break;

    case BASE_PRICE:
      if (value == null) {
        unsetBasePrice();
      } else {
        setBasePrice((Integer)value);
      }
      break;

    case COMMISSION:
      if (value == null) {
        unsetCommission();
      } else {
        setCommission((String)value);
      }
      break;

    case REWARD_MONEY:
      if (value == null) {
        unsetRewardMoney();
      } else {
        setRewardMoney((String)value);
      }
      break;

    case SALE_PRICE:
      if (value == null) {
        unsetSalePrice();
      } else {
        setSalePrice((Double)value);
      }
      break;

    case TAX_AMOUNT:
      if (value == null) {
        unsetTaxAmount();
      } else {
        setTaxAmount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PASSENGER_TYPE:
      return getPassengerType();

    case PASSGER_IDENTITY:
      return Integer.valueOf(getPassgerIdentity());

    case BASE_PRICE:
      return Integer.valueOf(getBasePrice());

    case COMMISSION:
      return getCommission();

    case REWARD_MONEY:
      return getRewardMoney();

    case SALE_PRICE:
      return Double.valueOf(getSalePrice());

    case TAX_AMOUNT:
      return Integer.valueOf(getTaxAmount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PASSENGER_TYPE:
      return isSetPassengerType();
    case PASSGER_IDENTITY:
      return isSetPassgerIdentity();
    case BASE_PRICE:
      return isSetBasePrice();
    case COMMISSION:
      return isSetCommission();
    case REWARD_MONEY:
      return isSetRewardMoney();
    case SALE_PRICE:
      return isSetSalePrice();
    case TAX_AMOUNT:
      return isSetTaxAmount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PassengerPrice)
      return this.equals((PassengerPrice)that);
    return false;
  }

  public boolean equals(PassengerPrice that) {
    if (that == null)
      return false;

    boolean this_present_passengerType = true && this.isSetPassengerType();
    boolean that_present_passengerType = true && that.isSetPassengerType();
    if (this_present_passengerType || that_present_passengerType) {
      if (!(this_present_passengerType && that_present_passengerType))
        return false;
      if (!this.passengerType.equals(that.passengerType))
        return false;
    }

    boolean this_present_passgerIdentity = true && this.isSetPassgerIdentity();
    boolean that_present_passgerIdentity = true && that.isSetPassgerIdentity();
    if (this_present_passgerIdentity || that_present_passgerIdentity) {
      if (!(this_present_passgerIdentity && that_present_passgerIdentity))
        return false;
      if (this.passgerIdentity != that.passgerIdentity)
        return false;
    }

    boolean this_present_basePrice = true;
    boolean that_present_basePrice = true;
    if (this_present_basePrice || that_present_basePrice) {
      if (!(this_present_basePrice && that_present_basePrice))
        return false;
      if (this.basePrice != that.basePrice)
        return false;
    }

    boolean this_present_commission = true && this.isSetCommission();
    boolean that_present_commission = true && that.isSetCommission();
    if (this_present_commission || that_present_commission) {
      if (!(this_present_commission && that_present_commission))
        return false;
      if (!this.commission.equals(that.commission))
        return false;
    }

    boolean this_present_rewardMoney = true && this.isSetRewardMoney();
    boolean that_present_rewardMoney = true && that.isSetRewardMoney();
    if (this_present_rewardMoney || that_present_rewardMoney) {
      if (!(this_present_rewardMoney && that_present_rewardMoney))
        return false;
      if (!this.rewardMoney.equals(that.rewardMoney))
        return false;
    }

    boolean this_present_salePrice = true && this.isSetSalePrice();
    boolean that_present_salePrice = true && that.isSetSalePrice();
    if (this_present_salePrice || that_present_salePrice) {
      if (!(this_present_salePrice && that_present_salePrice))
        return false;
      if (this.salePrice != that.salePrice)
        return false;
    }

    boolean this_present_taxAmount = true && this.isSetTaxAmount();
    boolean that_present_taxAmount = true && that.isSetTaxAmount();
    if (this_present_taxAmount || that_present_taxAmount) {
      if (!(this_present_taxAmount && that_present_taxAmount))
        return false;
      if (this.taxAmount != that.taxAmount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PassengerPrice other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PassengerPrice typedOther = (PassengerPrice)other;

    lastComparison = Boolean.valueOf(isSetPassengerType()).compareTo(typedOther.isSetPassengerType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassengerType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passengerType, typedOther.passengerType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPassgerIdentity()).compareTo(typedOther.isSetPassgerIdentity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassgerIdentity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passgerIdentity, typedOther.passgerIdentity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBasePrice()).compareTo(typedOther.isSetBasePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBasePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.basePrice, typedOther.basePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommission()).compareTo(typedOther.isSetCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commission, typedOther.commission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRewardMoney()).compareTo(typedOther.isSetRewardMoney());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRewardMoney()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rewardMoney, typedOther.rewardMoney);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSalePrice()).compareTo(typedOther.isSetSalePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salePrice, typedOther.salePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaxAmount()).compareTo(typedOther.isSetTaxAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaxAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taxAmount, typedOther.taxAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PassengerPrice(");
    boolean first = true;

    sb.append("passengerType:");
    if (this.passengerType == null) {
      sb.append("null");
    } else {
      sb.append(this.passengerType);
    }
    first = false;
    if (isSetPassgerIdentity()) {
      if (!first) sb.append(", ");
      sb.append("passgerIdentity:");
      sb.append(this.passgerIdentity);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("basePrice:");
    sb.append(this.basePrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("commission:");
    if (this.commission == null) {
      sb.append("null");
    } else {
      sb.append(this.commission);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rewardMoney:");
    if (this.rewardMoney == null) {
      sb.append("null");
    } else {
      sb.append(this.rewardMoney);
    }
    first = false;
    if (isSetSalePrice()) {
      if (!first) sb.append(", ");
      sb.append("salePrice:");
      sb.append(this.salePrice);
      first = false;
    }
    if (isSetTaxAmount()) {
      if (!first) sb.append(", ");
      sb.append("taxAmount:");
      sb.append(this.taxAmount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (passengerType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'passengerType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'basePrice' because it's a primitive and you chose the non-beans generator.
    if (commission == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'commission' was not present! Struct: " + toString());
    }
    if (rewardMoney == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rewardMoney' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PassengerPriceStandardSchemeFactory implements SchemeFactory {
    public PassengerPriceStandardScheme getScheme() {
      return new PassengerPriceStandardScheme();
    }
  }

  private static class PassengerPriceStandardScheme extends StandardScheme<PassengerPrice> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PassengerPrice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PASSENGER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.passengerType = iprot.readString();
              struct.setPassengerTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PASSGER_IDENTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.passgerIdentity = iprot.readI32();
              struct.setPassgerIdentityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BASE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.basePrice = iprot.readI32();
              struct.setBasePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commission = iprot.readString();
              struct.setCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REWARD_MONEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rewardMoney = iprot.readString();
              struct.setRewardMoneyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SALE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.salePrice = iprot.readDouble();
              struct.setSalePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TAX_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taxAmount = iprot.readI32();
              struct.setTaxAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBasePrice()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'basePrice' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PassengerPrice struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.passengerType != null) {
        oprot.writeFieldBegin(PASSENGER_TYPE_FIELD_DESC);
        oprot.writeString(struct.passengerType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPassgerIdentity()) {
        oprot.writeFieldBegin(PASSGER_IDENTITY_FIELD_DESC);
        oprot.writeI32(struct.passgerIdentity);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BASE_PRICE_FIELD_DESC);
      oprot.writeI32(struct.basePrice);
      oprot.writeFieldEnd();
      if (struct.commission != null) {
        oprot.writeFieldBegin(COMMISSION_FIELD_DESC);
        oprot.writeString(struct.commission);
        oprot.writeFieldEnd();
      }
      if (struct.rewardMoney != null) {
        oprot.writeFieldBegin(REWARD_MONEY_FIELD_DESC);
        oprot.writeString(struct.rewardMoney);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalePrice()) {
        oprot.writeFieldBegin(SALE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.salePrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTaxAmount()) {
        oprot.writeFieldBegin(TAX_AMOUNT_FIELD_DESC);
        oprot.writeI32(struct.taxAmount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PassengerPriceTupleSchemeFactory implements SchemeFactory {
    public PassengerPriceTupleScheme getScheme() {
      return new PassengerPriceTupleScheme();
    }
  }

  private static class PassengerPriceTupleScheme extends TupleScheme<PassengerPrice> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PassengerPrice struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.passengerType);
      oprot.writeI32(struct.basePrice);
      oprot.writeString(struct.commission);
      oprot.writeString(struct.rewardMoney);
      BitSet optionals = new BitSet();
      if (struct.isSetPassgerIdentity()) {
        optionals.set(0);
      }
      if (struct.isSetSalePrice()) {
        optionals.set(1);
      }
      if (struct.isSetTaxAmount()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPassgerIdentity()) {
        oprot.writeI32(struct.passgerIdentity);
      }
      if (struct.isSetSalePrice()) {
        oprot.writeDouble(struct.salePrice);
      }
      if (struct.isSetTaxAmount()) {
        oprot.writeI32(struct.taxAmount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PassengerPrice struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.passengerType = iprot.readString();
      struct.setPassengerTypeIsSet(true);
      struct.basePrice = iprot.readI32();
      struct.setBasePriceIsSet(true);
      struct.commission = iprot.readString();
      struct.setCommissionIsSet(true);
      struct.rewardMoney = iprot.readString();
      struct.setRewardMoneyIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.passgerIdentity = iprot.readI32();
        struct.setPassgerIdentityIsSet(true);
      }
      if (incoming.get(1)) {
        struct.salePrice = iprot.readDouble();
        struct.setSalePriceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.taxAmount = iprot.readI32();
        struct.setTaxAmountIsSet(true);
      }
    }
  }

}

