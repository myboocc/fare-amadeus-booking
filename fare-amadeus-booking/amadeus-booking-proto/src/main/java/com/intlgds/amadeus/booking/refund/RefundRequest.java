/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.intlgds.amadeus.booking.refund;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RefundRequest implements org.apache.thrift.TBase<RefundRequest, RefundRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RefundRequest");

  private static final org.apache.thrift.protocol.TField ORDER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CUSTOMER_ORDER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("customerOrderNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REFUND_CS_ORDER_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("refundCsOrderNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REFUND_SEGEMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("refundSegements", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField REFUND_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("refundDetails", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField REFUND_CALL_BACK_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("refundCallBackUrl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RefundRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RefundRequestTupleSchemeFactory());
  }

  public String orderNo; // required
  public String customerOrderNo; // required
  public String refundCsOrderNo; // required
  public String reason; // required
  public List<RefundSegement> refundSegements; // required
  public List<RefundDetail> refundDetails; // required
  public String refundCallBackUrl; // optional
  public String remark; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_NO((short)1, "orderNo"),
    CUSTOMER_ORDER_NO((short)2, "customerOrderNo"),
    REFUND_CS_ORDER_NO((short)3, "refundCsOrderNo"),
    REASON((short)4, "reason"),
    REFUND_SEGEMENTS((short)5, "refundSegements"),
    REFUND_DETAILS((short)6, "refundDetails"),
    REFUND_CALL_BACK_URL((short)7, "refundCallBackUrl"),
    REMARK((short)8, "remark");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_NO
          return ORDER_NO;
        case 2: // CUSTOMER_ORDER_NO
          return CUSTOMER_ORDER_NO;
        case 3: // REFUND_CS_ORDER_NO
          return REFUND_CS_ORDER_NO;
        case 4: // REASON
          return REASON;
        case 5: // REFUND_SEGEMENTS
          return REFUND_SEGEMENTS;
        case 6: // REFUND_DETAILS
          return REFUND_DETAILS;
        case 7: // REFUND_CALL_BACK_URL
          return REFUND_CALL_BACK_URL;
        case 8: // REMARK
          return REMARK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.REFUND_CALL_BACK_URL,_Fields.REMARK};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_NO, new org.apache.thrift.meta_data.FieldMetaData("orderNo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOMER_ORDER_NO, new org.apache.thrift.meta_data.FieldMetaData("customerOrderNo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_CS_ORDER_NO, new org.apache.thrift.meta_data.FieldMetaData("refundCsOrderNo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_SEGEMENTS, new org.apache.thrift.meta_data.FieldMetaData("refundSegements", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundSegement.class))));
    tmpMap.put(_Fields.REFUND_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("refundDetails", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundDetail.class))));
    tmpMap.put(_Fields.REFUND_CALL_BACK_URL, new org.apache.thrift.meta_data.FieldMetaData("refundCallBackUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RefundRequest.class, metaDataMap);
  }

  public RefundRequest() {
  }

  public RefundRequest(
    String orderNo,
    String customerOrderNo,
    String refundCsOrderNo,
    String reason,
    List<RefundSegement> refundSegements,
    List<RefundDetail> refundDetails)
  {
    this();
    this.orderNo = orderNo;
    this.customerOrderNo = customerOrderNo;
    this.refundCsOrderNo = refundCsOrderNo;
    this.reason = reason;
    this.refundSegements = refundSegements;
    this.refundDetails = refundDetails;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RefundRequest(RefundRequest other) {
    if (other.isSetOrderNo()) {
      this.orderNo = other.orderNo;
    }
    if (other.isSetCustomerOrderNo()) {
      this.customerOrderNo = other.customerOrderNo;
    }
    if (other.isSetRefundCsOrderNo()) {
      this.refundCsOrderNo = other.refundCsOrderNo;
    }
    if (other.isSetReason()) {
      this.reason = other.reason;
    }
    if (other.isSetRefundSegements()) {
      List<RefundSegement> __this__refundSegements = new ArrayList<RefundSegement>();
      for (RefundSegement other_element : other.refundSegements) {
        __this__refundSegements.add(new RefundSegement(other_element));
      }
      this.refundSegements = __this__refundSegements;
    }
    if (other.isSetRefundDetails()) {
      List<RefundDetail> __this__refundDetails = new ArrayList<RefundDetail>();
      for (RefundDetail other_element : other.refundDetails) {
        __this__refundDetails.add(new RefundDetail(other_element));
      }
      this.refundDetails = __this__refundDetails;
    }
    if (other.isSetRefundCallBackUrl()) {
      this.refundCallBackUrl = other.refundCallBackUrl;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
  }

  public RefundRequest deepCopy() {
    return new RefundRequest(this);
  }

  @Override
  public void clear() {
    this.orderNo = null;
    this.customerOrderNo = null;
    this.refundCsOrderNo = null;
    this.reason = null;
    this.refundSegements = null;
    this.refundDetails = null;
    this.refundCallBackUrl = null;
    this.remark = null;
  }

  public String getOrderNo() {
    return this.orderNo;
  }

  public RefundRequest setOrderNo(String orderNo) {
    this.orderNo = orderNo;
    return this;
  }

  public void unsetOrderNo() {
    this.orderNo = null;
  }

  /** Returns true if field orderNo is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderNo() {
    return this.orderNo != null;
  }

  public void setOrderNoIsSet(boolean value) {
    if (!value) {
      this.orderNo = null;
    }
  }

  public String getCustomerOrderNo() {
    return this.customerOrderNo;
  }

  public RefundRequest setCustomerOrderNo(String customerOrderNo) {
    this.customerOrderNo = customerOrderNo;
    return this;
  }

  public void unsetCustomerOrderNo() {
    this.customerOrderNo = null;
  }

  /** Returns true if field customerOrderNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomerOrderNo() {
    return this.customerOrderNo != null;
  }

  public void setCustomerOrderNoIsSet(boolean value) {
    if (!value) {
      this.customerOrderNo = null;
    }
  }

  public String getRefundCsOrderNo() {
    return this.refundCsOrderNo;
  }

  public RefundRequest setRefundCsOrderNo(String refundCsOrderNo) {
    this.refundCsOrderNo = refundCsOrderNo;
    return this;
  }

  public void unsetRefundCsOrderNo() {
    this.refundCsOrderNo = null;
  }

  /** Returns true if field refundCsOrderNo is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundCsOrderNo() {
    return this.refundCsOrderNo != null;
  }

  public void setRefundCsOrderNoIsSet(boolean value) {
    if (!value) {
      this.refundCsOrderNo = null;
    }
  }

  public String getReason() {
    return this.reason;
  }

  public RefundRequest setReason(String reason) {
    this.reason = reason;
    return this;
  }

  public void unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return this.reason != null;
  }

  public void setReasonIsSet(boolean value) {
    if (!value) {
      this.reason = null;
    }
  }

  public int getRefundSegementsSize() {
    return (this.refundSegements == null) ? 0 : this.refundSegements.size();
  }

  public java.util.Iterator<RefundSegement> getRefundSegementsIterator() {
    return (this.refundSegements == null) ? null : this.refundSegements.iterator();
  }

  public void addToRefundSegements(RefundSegement elem) {
    if (this.refundSegements == null) {
      this.refundSegements = new ArrayList<RefundSegement>();
    }
    this.refundSegements.add(elem);
  }

  public List<RefundSegement> getRefundSegements() {
    return this.refundSegements;
  }

  public RefundRequest setRefundSegements(List<RefundSegement> refundSegements) {
    this.refundSegements = refundSegements;
    return this;
  }

  public void unsetRefundSegements() {
    this.refundSegements = null;
  }

  /** Returns true if field refundSegements is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundSegements() {
    return this.refundSegements != null;
  }

  public void setRefundSegementsIsSet(boolean value) {
    if (!value) {
      this.refundSegements = null;
    }
  }

  public int getRefundDetailsSize() {
    return (this.refundDetails == null) ? 0 : this.refundDetails.size();
  }

  public java.util.Iterator<RefundDetail> getRefundDetailsIterator() {
    return (this.refundDetails == null) ? null : this.refundDetails.iterator();
  }

  public void addToRefundDetails(RefundDetail elem) {
    if (this.refundDetails == null) {
      this.refundDetails = new ArrayList<RefundDetail>();
    }
    this.refundDetails.add(elem);
  }

  public List<RefundDetail> getRefundDetails() {
    return this.refundDetails;
  }

  public RefundRequest setRefundDetails(List<RefundDetail> refundDetails) {
    this.refundDetails = refundDetails;
    return this;
  }

  public void unsetRefundDetails() {
    this.refundDetails = null;
  }

  /** Returns true if field refundDetails is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundDetails() {
    return this.refundDetails != null;
  }

  public void setRefundDetailsIsSet(boolean value) {
    if (!value) {
      this.refundDetails = null;
    }
  }

  public String getRefundCallBackUrl() {
    return this.refundCallBackUrl;
  }

  public RefundRequest setRefundCallBackUrl(String refundCallBackUrl) {
    this.refundCallBackUrl = refundCallBackUrl;
    return this;
  }

  public void unsetRefundCallBackUrl() {
    this.refundCallBackUrl = null;
  }

  /** Returns true if field refundCallBackUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundCallBackUrl() {
    return this.refundCallBackUrl != null;
  }

  public void setRefundCallBackUrlIsSet(boolean value) {
    if (!value) {
      this.refundCallBackUrl = null;
    }
  }

  public String getRemark() {
    return this.remark;
  }

  public RefundRequest setRemark(String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_NO:
      if (value == null) {
        unsetOrderNo();
      } else {
        setOrderNo((String)value);
      }
      break;

    case CUSTOMER_ORDER_NO:
      if (value == null) {
        unsetCustomerOrderNo();
      } else {
        setCustomerOrderNo((String)value);
      }
      break;

    case REFUND_CS_ORDER_NO:
      if (value == null) {
        unsetRefundCsOrderNo();
      } else {
        setRefundCsOrderNo((String)value);
      }
      break;

    case REASON:
      if (value == null) {
        unsetReason();
      } else {
        setReason((String)value);
      }
      break;

    case REFUND_SEGEMENTS:
      if (value == null) {
        unsetRefundSegements();
      } else {
        setRefundSegements((List<RefundSegement>)value);
      }
      break;

    case REFUND_DETAILS:
      if (value == null) {
        unsetRefundDetails();
      } else {
        setRefundDetails((List<RefundDetail>)value);
      }
      break;

    case REFUND_CALL_BACK_URL:
      if (value == null) {
        unsetRefundCallBackUrl();
      } else {
        setRefundCallBackUrl((String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_NO:
      return getOrderNo();

    case CUSTOMER_ORDER_NO:
      return getCustomerOrderNo();

    case REFUND_CS_ORDER_NO:
      return getRefundCsOrderNo();

    case REASON:
      return getReason();

    case REFUND_SEGEMENTS:
      return getRefundSegements();

    case REFUND_DETAILS:
      return getRefundDetails();

    case REFUND_CALL_BACK_URL:
      return getRefundCallBackUrl();

    case REMARK:
      return getRemark();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_NO:
      return isSetOrderNo();
    case CUSTOMER_ORDER_NO:
      return isSetCustomerOrderNo();
    case REFUND_CS_ORDER_NO:
      return isSetRefundCsOrderNo();
    case REASON:
      return isSetReason();
    case REFUND_SEGEMENTS:
      return isSetRefundSegements();
    case REFUND_DETAILS:
      return isSetRefundDetails();
    case REFUND_CALL_BACK_URL:
      return isSetRefundCallBackUrl();
    case REMARK:
      return isSetRemark();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RefundRequest)
      return this.equals((RefundRequest)that);
    return false;
  }

  public boolean equals(RefundRequest that) {
    if (that == null)
      return false;

    boolean this_present_orderNo = true && this.isSetOrderNo();
    boolean that_present_orderNo = true && that.isSetOrderNo();
    if (this_present_orderNo || that_present_orderNo) {
      if (!(this_present_orderNo && that_present_orderNo))
        return false;
      if (!this.orderNo.equals(that.orderNo))
        return false;
    }

    boolean this_present_customerOrderNo = true && this.isSetCustomerOrderNo();
    boolean that_present_customerOrderNo = true && that.isSetCustomerOrderNo();
    if (this_present_customerOrderNo || that_present_customerOrderNo) {
      if (!(this_present_customerOrderNo && that_present_customerOrderNo))
        return false;
      if (!this.customerOrderNo.equals(that.customerOrderNo))
        return false;
    }

    boolean this_present_refundCsOrderNo = true && this.isSetRefundCsOrderNo();
    boolean that_present_refundCsOrderNo = true && that.isSetRefundCsOrderNo();
    if (this_present_refundCsOrderNo || that_present_refundCsOrderNo) {
      if (!(this_present_refundCsOrderNo && that_present_refundCsOrderNo))
        return false;
      if (!this.refundCsOrderNo.equals(that.refundCsOrderNo))
        return false;
    }

    boolean this_present_reason = true && this.isSetReason();
    boolean that_present_reason = true && that.isSetReason();
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (!this.reason.equals(that.reason))
        return false;
    }

    boolean this_present_refundSegements = true && this.isSetRefundSegements();
    boolean that_present_refundSegements = true && that.isSetRefundSegements();
    if (this_present_refundSegements || that_present_refundSegements) {
      if (!(this_present_refundSegements && that_present_refundSegements))
        return false;
      if (!this.refundSegements.equals(that.refundSegements))
        return false;
    }

    boolean this_present_refundDetails = true && this.isSetRefundDetails();
    boolean that_present_refundDetails = true && that.isSetRefundDetails();
    if (this_present_refundDetails || that_present_refundDetails) {
      if (!(this_present_refundDetails && that_present_refundDetails))
        return false;
      if (!this.refundDetails.equals(that.refundDetails))
        return false;
    }

    boolean this_present_refundCallBackUrl = true && this.isSetRefundCallBackUrl();
    boolean that_present_refundCallBackUrl = true && that.isSetRefundCallBackUrl();
    if (this_present_refundCallBackUrl || that_present_refundCallBackUrl) {
      if (!(this_present_refundCallBackUrl && that_present_refundCallBackUrl))
        return false;
      if (!this.refundCallBackUrl.equals(that.refundCallBackUrl))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RefundRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RefundRequest typedOther = (RefundRequest)other;

    lastComparison = Boolean.valueOf(isSetOrderNo()).compareTo(typedOther.isSetOrderNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNo, typedOther.orderNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCustomerOrderNo()).compareTo(typedOther.isSetCustomerOrderNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomerOrderNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customerOrderNo, typedOther.customerOrderNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundCsOrderNo()).compareTo(typedOther.isSetRefundCsOrderNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundCsOrderNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundCsOrderNo, typedOther.refundCsOrderNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReason()).compareTo(typedOther.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, typedOther.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundSegements()).compareTo(typedOther.isSetRefundSegements());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundSegements()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundSegements, typedOther.refundSegements);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundDetails()).compareTo(typedOther.isSetRefundDetails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundDetails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundDetails, typedOther.refundDetails);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundCallBackUrl()).compareTo(typedOther.isSetRefundCallBackUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundCallBackUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundCallBackUrl, typedOther.refundCallBackUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemark()).compareTo(typedOther.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, typedOther.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RefundRequest(");
    boolean first = true;

    sb.append("orderNo:");
    if (this.orderNo == null) {
      sb.append("null");
    } else {
      sb.append(this.orderNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("customerOrderNo:");
    if (this.customerOrderNo == null) {
      sb.append("null");
    } else {
      sb.append(this.customerOrderNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundCsOrderNo:");
    if (this.refundCsOrderNo == null) {
      sb.append("null");
    } else {
      sb.append(this.refundCsOrderNo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reason:");
    if (this.reason == null) {
      sb.append("null");
    } else {
      sb.append(this.reason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundSegements:");
    if (this.refundSegements == null) {
      sb.append("null");
    } else {
      sb.append(this.refundSegements);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundDetails:");
    if (this.refundDetails == null) {
      sb.append("null");
    } else {
      sb.append(this.refundDetails);
    }
    first = false;
    if (isSetRefundCallBackUrl()) {
      if (!first) sb.append(", ");
      sb.append("refundCallBackUrl:");
      if (this.refundCallBackUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.refundCallBackUrl);
      }
      first = false;
    }
    if (isSetRemark()) {
      if (!first) sb.append(", ");
      sb.append("remark:");
      if (this.remark == null) {
        sb.append("null");
      } else {
        sb.append(this.remark);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (orderNo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'orderNo' was not present! Struct: " + toString());
    }
    if (customerOrderNo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'customerOrderNo' was not present! Struct: " + toString());
    }
    if (refundCsOrderNo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'refundCsOrderNo' was not present! Struct: " + toString());
    }
    if (reason == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'reason' was not present! Struct: " + toString());
    }
    if (refundSegements == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'refundSegements' was not present! Struct: " + toString());
    }
    if (refundDetails == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'refundDetails' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RefundRequestStandardSchemeFactory implements SchemeFactory {
    public RefundRequestStandardScheme getScheme() {
      return new RefundRequestStandardScheme();
    }
  }

  private static class RefundRequestStandardScheme extends StandardScheme<RefundRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RefundRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderNo = iprot.readString();
              struct.setOrderNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CUSTOMER_ORDER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.customerOrderNo = iprot.readString();
              struct.setCustomerOrderNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REFUND_CS_ORDER_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundCsOrderNo = iprot.readString();
              struct.setRefundCsOrderNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reason = iprot.readString();
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REFUND_SEGEMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.refundSegements = new ArrayList<RefundSegement>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  RefundSegement _elem2; // required
                  _elem2 = new RefundSegement();
                  _elem2.read(iprot);
                  struct.refundSegements.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setRefundSegementsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REFUND_DETAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.refundDetails = new ArrayList<RefundDetail>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  RefundDetail _elem5; // required
                  _elem5 = new RefundDetail();
                  _elem5.read(iprot);
                  struct.refundDetails.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setRefundDetailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // REFUND_CALL_BACK_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundCallBackUrl = iprot.readString();
              struct.setRefundCallBackUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RefundRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderNo != null) {
        oprot.writeFieldBegin(ORDER_NO_FIELD_DESC);
        oprot.writeString(struct.orderNo);
        oprot.writeFieldEnd();
      }
      if (struct.customerOrderNo != null) {
        oprot.writeFieldBegin(CUSTOMER_ORDER_NO_FIELD_DESC);
        oprot.writeString(struct.customerOrderNo);
        oprot.writeFieldEnd();
      }
      if (struct.refundCsOrderNo != null) {
        oprot.writeFieldBegin(REFUND_CS_ORDER_NO_FIELD_DESC);
        oprot.writeString(struct.refundCsOrderNo);
        oprot.writeFieldEnd();
      }
      if (struct.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC);
        oprot.writeString(struct.reason);
        oprot.writeFieldEnd();
      }
      if (struct.refundSegements != null) {
        oprot.writeFieldBegin(REFUND_SEGEMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.refundSegements.size()));
          for (RefundSegement _iter6 : struct.refundSegements)
          {
            _iter6.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.refundDetails != null) {
        oprot.writeFieldBegin(REFUND_DETAILS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.refundDetails.size()));
          for (RefundDetail _iter7 : struct.refundDetails)
          {
            _iter7.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.refundCallBackUrl != null) {
        if (struct.isSetRefundCallBackUrl()) {
          oprot.writeFieldBegin(REFUND_CALL_BACK_URL_FIELD_DESC);
          oprot.writeString(struct.refundCallBackUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remark != null) {
        if (struct.isSetRemark()) {
          oprot.writeFieldBegin(REMARK_FIELD_DESC);
          oprot.writeString(struct.remark);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RefundRequestTupleSchemeFactory implements SchemeFactory {
    public RefundRequestTupleScheme getScheme() {
      return new RefundRequestTupleScheme();
    }
  }

  private static class RefundRequestTupleScheme extends TupleScheme<RefundRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RefundRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.orderNo);
      oprot.writeString(struct.customerOrderNo);
      oprot.writeString(struct.refundCsOrderNo);
      oprot.writeString(struct.reason);
      {
        oprot.writeI32(struct.refundSegements.size());
        for (RefundSegement _iter8 : struct.refundSegements)
        {
          _iter8.write(oprot);
        }
      }
      {
        oprot.writeI32(struct.refundDetails.size());
        for (RefundDetail _iter9 : struct.refundDetails)
        {
          _iter9.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetRefundCallBackUrl()) {
        optionals.set(0);
      }
      if (struct.isSetRemark()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetRefundCallBackUrl()) {
        oprot.writeString(struct.refundCallBackUrl);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RefundRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.orderNo = iprot.readString();
      struct.setOrderNoIsSet(true);
      struct.customerOrderNo = iprot.readString();
      struct.setCustomerOrderNoIsSet(true);
      struct.refundCsOrderNo = iprot.readString();
      struct.setRefundCsOrderNoIsSet(true);
      struct.reason = iprot.readString();
      struct.setReasonIsSet(true);
      {
        org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.refundSegements = new ArrayList<RefundSegement>(_list10.size);
        for (int _i11 = 0; _i11 < _list10.size; ++_i11)
        {
          RefundSegement _elem12; // required
          _elem12 = new RefundSegement();
          _elem12.read(iprot);
          struct.refundSegements.add(_elem12);
        }
      }
      struct.setRefundSegementsIsSet(true);
      {
        org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.refundDetails = new ArrayList<RefundDetail>(_list13.size);
        for (int _i14 = 0; _i14 < _list13.size; ++_i14)
        {
          RefundDetail _elem15; // required
          _elem15 = new RefundDetail();
          _elem15.read(iprot);
          struct.refundDetails.add(_elem15);
        }
      }
      struct.setRefundDetailsIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.refundCallBackUrl = iprot.readString();
        struct.setRefundCallBackUrlIsSet(true);
      }
      if (incoming.get(1)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
    }
  }

}

