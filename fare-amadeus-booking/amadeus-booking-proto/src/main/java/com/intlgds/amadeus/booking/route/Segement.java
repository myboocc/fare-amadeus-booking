/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.intlgds.amadeus.booking.route;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Segement implements org.apache.thrift.TBase<Segement, Segement._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Segement");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField FLIGHT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("flightNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CARRIER_FLIGHT_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("carrierFlightNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CABIN_FIELD_DESC = new org.apache.thrift.protocol.TField("cabin", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CABIN_RANK_FIELD_DESC = new org.apache.thrift.protocol.TField("cabinRank", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DEP_AIRPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("depAirport", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DEP_TERMINAL_FIELD_DESC = new org.apache.thrift.protocol.TField("depTerminal", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DEP_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("depDate", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DEP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("depTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ARR_AIRPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("arrAirport", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ARR_TERMINAL_FIELD_DESC = new org.apache.thrift.protocol.TField("arrTerminal", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField ARR_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("arrDate", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ARR_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("arrTime", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField STOP_OVER_FIELD_DESC = new org.apache.thrift.protocol.TField("stopOver", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField CODE_SHARE_FIELD_DESC = new org.apache.thrift.protocol.TField("codeShare", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField FLIGHT_DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("flightDuration", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField TPM_FIELD_DESC = new org.apache.thrift.protocol.TField("tpm", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField PLANE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("planeType", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField MEAL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mealType", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SegementStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SegementTupleSchemeFactory());
  }

  public int id; // required
  public String flightNo; // required
  public String carrierFlightNo; // optional
  public String cabin; // required
  public String cabinRank; // required
  public String depAirport; // required
  public String depTerminal; // optional
  public String depDate; // required
  public String depTime; // required
  public String arrAirport; // required
  public String arrTerminal; // optional
  public String arrDate; // required
  public String arrTime; // required
  public List<StopOver> stopOver; // optional
  public String codeShare; // required
  public String flightDuration; // required
  public int tpm; // optional
  public String planeType; // required
  public String mealType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    FLIGHT_NO((short)2, "flightNo"),
    CARRIER_FLIGHT_NO((short)3, "carrierFlightNo"),
    CABIN((short)4, "cabin"),
    CABIN_RANK((short)5, "cabinRank"),
    DEP_AIRPORT((short)6, "depAirport"),
    DEP_TERMINAL((short)7, "depTerminal"),
    DEP_DATE((short)8, "depDate"),
    DEP_TIME((short)9, "depTime"),
    ARR_AIRPORT((short)10, "arrAirport"),
    ARR_TERMINAL((short)11, "arrTerminal"),
    ARR_DATE((short)12, "arrDate"),
    ARR_TIME((short)13, "arrTime"),
    STOP_OVER((short)14, "stopOver"),
    CODE_SHARE((short)15, "codeShare"),
    FLIGHT_DURATION((short)16, "flightDuration"),
    TPM((short)17, "tpm"),
    PLANE_TYPE((short)18, "planeType"),
    MEAL_TYPE((short)19, "mealType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // FLIGHT_NO
          return FLIGHT_NO;
        case 3: // CARRIER_FLIGHT_NO
          return CARRIER_FLIGHT_NO;
        case 4: // CABIN
          return CABIN;
        case 5: // CABIN_RANK
          return CABIN_RANK;
        case 6: // DEP_AIRPORT
          return DEP_AIRPORT;
        case 7: // DEP_TERMINAL
          return DEP_TERMINAL;
        case 8: // DEP_DATE
          return DEP_DATE;
        case 9: // DEP_TIME
          return DEP_TIME;
        case 10: // ARR_AIRPORT
          return ARR_AIRPORT;
        case 11: // ARR_TERMINAL
          return ARR_TERMINAL;
        case 12: // ARR_DATE
          return ARR_DATE;
        case 13: // ARR_TIME
          return ARR_TIME;
        case 14: // STOP_OVER
          return STOP_OVER;
        case 15: // CODE_SHARE
          return CODE_SHARE;
        case 16: // FLIGHT_DURATION
          return FLIGHT_DURATION;
        case 17: // TPM
          return TPM;
        case 18: // PLANE_TYPE
          return PLANE_TYPE;
        case 19: // MEAL_TYPE
          return MEAL_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __TPM_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CARRIER_FLIGHT_NO,_Fields.DEP_TERMINAL,_Fields.ARR_TERMINAL,_Fields.STOP_OVER,_Fields.TPM,_Fields.MEAL_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FLIGHT_NO, new org.apache.thrift.meta_data.FieldMetaData("flightNo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARRIER_FLIGHT_NO, new org.apache.thrift.meta_data.FieldMetaData("carrierFlightNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CABIN, new org.apache.thrift.meta_data.FieldMetaData("cabin", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CABIN_RANK, new org.apache.thrift.meta_data.FieldMetaData("cabinRank", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEP_AIRPORT, new org.apache.thrift.meta_data.FieldMetaData("depAirport", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEP_TERMINAL, new org.apache.thrift.meta_data.FieldMetaData("depTerminal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEP_DATE, new org.apache.thrift.meta_data.FieldMetaData("depDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEP_TIME, new org.apache.thrift.meta_data.FieldMetaData("depTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARR_AIRPORT, new org.apache.thrift.meta_data.FieldMetaData("arrAirport", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARR_TERMINAL, new org.apache.thrift.meta_data.FieldMetaData("arrTerminal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARR_DATE, new org.apache.thrift.meta_data.FieldMetaData("arrDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARR_TIME, new org.apache.thrift.meta_data.FieldMetaData("arrTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STOP_OVER, new org.apache.thrift.meta_data.FieldMetaData("stopOver", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StopOver.class))));
    tmpMap.put(_Fields.CODE_SHARE, new org.apache.thrift.meta_data.FieldMetaData("codeShare", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLIGHT_DURATION, new org.apache.thrift.meta_data.FieldMetaData("flightDuration", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TPM, new org.apache.thrift.meta_data.FieldMetaData("tpm", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PLANE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("planeType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEAL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mealType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Segement.class, metaDataMap);
  }

  public Segement() {
  }

  public Segement(
    int id,
    String flightNo,
    String cabin,
    String cabinRank,
    String depAirport,
    String depDate,
    String depTime,
    String arrAirport,
    String arrDate,
    String arrTime,
    String codeShare,
    String flightDuration,
    String planeType)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.flightNo = flightNo;
    this.cabin = cabin;
    this.cabinRank = cabinRank;
    this.depAirport = depAirport;
    this.depDate = depDate;
    this.depTime = depTime;
    this.arrAirport = arrAirport;
    this.arrDate = arrDate;
    this.arrTime = arrTime;
    this.codeShare = codeShare;
    this.flightDuration = flightDuration;
    this.planeType = planeType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Segement(Segement other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetFlightNo()) {
      this.flightNo = other.flightNo;
    }
    if (other.isSetCarrierFlightNo()) {
      this.carrierFlightNo = other.carrierFlightNo;
    }
    if (other.isSetCabin()) {
      this.cabin = other.cabin;
    }
    if (other.isSetCabinRank()) {
      this.cabinRank = other.cabinRank;
    }
    if (other.isSetDepAirport()) {
      this.depAirport = other.depAirport;
    }
    if (other.isSetDepTerminal()) {
      this.depTerminal = other.depTerminal;
    }
    if (other.isSetDepDate()) {
      this.depDate = other.depDate;
    }
    if (other.isSetDepTime()) {
      this.depTime = other.depTime;
    }
    if (other.isSetArrAirport()) {
      this.arrAirport = other.arrAirport;
    }
    if (other.isSetArrTerminal()) {
      this.arrTerminal = other.arrTerminal;
    }
    if (other.isSetArrDate()) {
      this.arrDate = other.arrDate;
    }
    if (other.isSetArrTime()) {
      this.arrTime = other.arrTime;
    }
    if (other.isSetStopOver()) {
      List<StopOver> __this__stopOver = new ArrayList<StopOver>();
      for (StopOver other_element : other.stopOver) {
        __this__stopOver.add(new StopOver(other_element));
      }
      this.stopOver = __this__stopOver;
    }
    if (other.isSetCodeShare()) {
      this.codeShare = other.codeShare;
    }
    if (other.isSetFlightDuration()) {
      this.flightDuration = other.flightDuration;
    }
    this.tpm = other.tpm;
    if (other.isSetPlaneType()) {
      this.planeType = other.planeType;
    }
    if (other.isSetMealType()) {
      this.mealType = other.mealType;
    }
  }

  public Segement deepCopy() {
    return new Segement(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.flightNo = null;
    this.carrierFlightNo = null;
    this.cabin = null;
    this.cabinRank = null;
    this.depAirport = null;
    this.depTerminal = null;
    this.depDate = null;
    this.depTime = null;
    this.arrAirport = null;
    this.arrTerminal = null;
    this.arrDate = null;
    this.arrTime = null;
    this.stopOver = null;
    this.codeShare = null;
    this.flightDuration = null;
    setTpmIsSet(false);
    this.tpm = 0;
    this.planeType = null;
    this.mealType = null;
  }

  public int getId() {
    return this.id;
  }

  public Segement setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getFlightNo() {
    return this.flightNo;
  }

  public Segement setFlightNo(String flightNo) {
    this.flightNo = flightNo;
    return this;
  }

  public void unsetFlightNo() {
    this.flightNo = null;
  }

  /** Returns true if field flightNo is set (has been assigned a value) and false otherwise */
  public boolean isSetFlightNo() {
    return this.flightNo != null;
  }

  public void setFlightNoIsSet(boolean value) {
    if (!value) {
      this.flightNo = null;
    }
  }

  public String getCarrierFlightNo() {
    return this.carrierFlightNo;
  }

  public Segement setCarrierFlightNo(String carrierFlightNo) {
    this.carrierFlightNo = carrierFlightNo;
    return this;
  }

  public void unsetCarrierFlightNo() {
    this.carrierFlightNo = null;
  }

  /** Returns true if field carrierFlightNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCarrierFlightNo() {
    return this.carrierFlightNo != null;
  }

  public void setCarrierFlightNoIsSet(boolean value) {
    if (!value) {
      this.carrierFlightNo = null;
    }
  }

  public String getCabin() {
    return this.cabin;
  }

  public Segement setCabin(String cabin) {
    this.cabin = cabin;
    return this;
  }

  public void unsetCabin() {
    this.cabin = null;
  }

  /** Returns true if field cabin is set (has been assigned a value) and false otherwise */
  public boolean isSetCabin() {
    return this.cabin != null;
  }

  public void setCabinIsSet(boolean value) {
    if (!value) {
      this.cabin = null;
    }
  }

  public String getCabinRank() {
    return this.cabinRank;
  }

  public Segement setCabinRank(String cabinRank) {
    this.cabinRank = cabinRank;
    return this;
  }

  public void unsetCabinRank() {
    this.cabinRank = null;
  }

  /** Returns true if field cabinRank is set (has been assigned a value) and false otherwise */
  public boolean isSetCabinRank() {
    return this.cabinRank != null;
  }

  public void setCabinRankIsSet(boolean value) {
    if (!value) {
      this.cabinRank = null;
    }
  }

  public String getDepAirport() {
    return this.depAirport;
  }

  public Segement setDepAirport(String depAirport) {
    this.depAirport = depAirport;
    return this;
  }

  public void unsetDepAirport() {
    this.depAirport = null;
  }

  /** Returns true if field depAirport is set (has been assigned a value) and false otherwise */
  public boolean isSetDepAirport() {
    return this.depAirport != null;
  }

  public void setDepAirportIsSet(boolean value) {
    if (!value) {
      this.depAirport = null;
    }
  }

  public String getDepTerminal() {
    return this.depTerminal;
  }

  public Segement setDepTerminal(String depTerminal) {
    this.depTerminal = depTerminal;
    return this;
  }

  public void unsetDepTerminal() {
    this.depTerminal = null;
  }

  /** Returns true if field depTerminal is set (has been assigned a value) and false otherwise */
  public boolean isSetDepTerminal() {
    return this.depTerminal != null;
  }

  public void setDepTerminalIsSet(boolean value) {
    if (!value) {
      this.depTerminal = null;
    }
  }

  public String getDepDate() {
    return this.depDate;
  }

  public Segement setDepDate(String depDate) {
    this.depDate = depDate;
    return this;
  }

  public void unsetDepDate() {
    this.depDate = null;
  }

  /** Returns true if field depDate is set (has been assigned a value) and false otherwise */
  public boolean isSetDepDate() {
    return this.depDate != null;
  }

  public void setDepDateIsSet(boolean value) {
    if (!value) {
      this.depDate = null;
    }
  }

  public String getDepTime() {
    return this.depTime;
  }

  public Segement setDepTime(String depTime) {
    this.depTime = depTime;
    return this;
  }

  public void unsetDepTime() {
    this.depTime = null;
  }

  /** Returns true if field depTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDepTime() {
    return this.depTime != null;
  }

  public void setDepTimeIsSet(boolean value) {
    if (!value) {
      this.depTime = null;
    }
  }

  public String getArrAirport() {
    return this.arrAirport;
  }

  public Segement setArrAirport(String arrAirport) {
    this.arrAirport = arrAirport;
    return this;
  }

  public void unsetArrAirport() {
    this.arrAirport = null;
  }

  /** Returns true if field arrAirport is set (has been assigned a value) and false otherwise */
  public boolean isSetArrAirport() {
    return this.arrAirport != null;
  }

  public void setArrAirportIsSet(boolean value) {
    if (!value) {
      this.arrAirport = null;
    }
  }

  public String getArrTerminal() {
    return this.arrTerminal;
  }

  public Segement setArrTerminal(String arrTerminal) {
    this.arrTerminal = arrTerminal;
    return this;
  }

  public void unsetArrTerminal() {
    this.arrTerminal = null;
  }

  /** Returns true if field arrTerminal is set (has been assigned a value) and false otherwise */
  public boolean isSetArrTerminal() {
    return this.arrTerminal != null;
  }

  public void setArrTerminalIsSet(boolean value) {
    if (!value) {
      this.arrTerminal = null;
    }
  }

  public String getArrDate() {
    return this.arrDate;
  }

  public Segement setArrDate(String arrDate) {
    this.arrDate = arrDate;
    return this;
  }

  public void unsetArrDate() {
    this.arrDate = null;
  }

  /** Returns true if field arrDate is set (has been assigned a value) and false otherwise */
  public boolean isSetArrDate() {
    return this.arrDate != null;
  }

  public void setArrDateIsSet(boolean value) {
    if (!value) {
      this.arrDate = null;
    }
  }

  public String getArrTime() {
    return this.arrTime;
  }

  public Segement setArrTime(String arrTime) {
    this.arrTime = arrTime;
    return this;
  }

  public void unsetArrTime() {
    this.arrTime = null;
  }

  /** Returns true if field arrTime is set (has been assigned a value) and false otherwise */
  public boolean isSetArrTime() {
    return this.arrTime != null;
  }

  public void setArrTimeIsSet(boolean value) {
    if (!value) {
      this.arrTime = null;
    }
  }

  public int getStopOverSize() {
    return (this.stopOver == null) ? 0 : this.stopOver.size();
  }

  public java.util.Iterator<StopOver> getStopOverIterator() {
    return (this.stopOver == null) ? null : this.stopOver.iterator();
  }

  public void addToStopOver(StopOver elem) {
    if (this.stopOver == null) {
      this.stopOver = new ArrayList<StopOver>();
    }
    this.stopOver.add(elem);
  }

  public List<StopOver> getStopOver() {
    return this.stopOver;
  }

  public Segement setStopOver(List<StopOver> stopOver) {
    this.stopOver = stopOver;
    return this;
  }

  public void unsetStopOver() {
    this.stopOver = null;
  }

  /** Returns true if field stopOver is set (has been assigned a value) and false otherwise */
  public boolean isSetStopOver() {
    return this.stopOver != null;
  }

  public void setStopOverIsSet(boolean value) {
    if (!value) {
      this.stopOver = null;
    }
  }

  public String getCodeShare() {
    return this.codeShare;
  }

  public Segement setCodeShare(String codeShare) {
    this.codeShare = codeShare;
    return this;
  }

  public void unsetCodeShare() {
    this.codeShare = null;
  }

  /** Returns true if field codeShare is set (has been assigned a value) and false otherwise */
  public boolean isSetCodeShare() {
    return this.codeShare != null;
  }

  public void setCodeShareIsSet(boolean value) {
    if (!value) {
      this.codeShare = null;
    }
  }

  public String getFlightDuration() {
    return this.flightDuration;
  }

  public Segement setFlightDuration(String flightDuration) {
    this.flightDuration = flightDuration;
    return this;
  }

  public void unsetFlightDuration() {
    this.flightDuration = null;
  }

  /** Returns true if field flightDuration is set (has been assigned a value) and false otherwise */
  public boolean isSetFlightDuration() {
    return this.flightDuration != null;
  }

  public void setFlightDurationIsSet(boolean value) {
    if (!value) {
      this.flightDuration = null;
    }
  }

  public int getTpm() {
    return this.tpm;
  }

  public Segement setTpm(int tpm) {
    this.tpm = tpm;
    setTpmIsSet(true);
    return this;
  }

  public void unsetTpm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TPM_ISSET_ID);
  }

  /** Returns true if field tpm is set (has been assigned a value) and false otherwise */
  public boolean isSetTpm() {
    return EncodingUtils.testBit(__isset_bitfield, __TPM_ISSET_ID);
  }

  public void setTpmIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TPM_ISSET_ID, value);
  }

  public String getPlaneType() {
    return this.planeType;
  }

  public Segement setPlaneType(String planeType) {
    this.planeType = planeType;
    return this;
  }

  public void unsetPlaneType() {
    this.planeType = null;
  }

  /** Returns true if field planeType is set (has been assigned a value) and false otherwise */
  public boolean isSetPlaneType() {
    return this.planeType != null;
  }

  public void setPlaneTypeIsSet(boolean value) {
    if (!value) {
      this.planeType = null;
    }
  }

  public String getMealType() {
    return this.mealType;
  }

  public Segement setMealType(String mealType) {
    this.mealType = mealType;
    return this;
  }

  public void unsetMealType() {
    this.mealType = null;
  }

  /** Returns true if field mealType is set (has been assigned a value) and false otherwise */
  public boolean isSetMealType() {
    return this.mealType != null;
  }

  public void setMealTypeIsSet(boolean value) {
    if (!value) {
      this.mealType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case FLIGHT_NO:
      if (value == null) {
        unsetFlightNo();
      } else {
        setFlightNo((String)value);
      }
      break;

    case CARRIER_FLIGHT_NO:
      if (value == null) {
        unsetCarrierFlightNo();
      } else {
        setCarrierFlightNo((String)value);
      }
      break;

    case CABIN:
      if (value == null) {
        unsetCabin();
      } else {
        setCabin((String)value);
      }
      break;

    case CABIN_RANK:
      if (value == null) {
        unsetCabinRank();
      } else {
        setCabinRank((String)value);
      }
      break;

    case DEP_AIRPORT:
      if (value == null) {
        unsetDepAirport();
      } else {
        setDepAirport((String)value);
      }
      break;

    case DEP_TERMINAL:
      if (value == null) {
        unsetDepTerminal();
      } else {
        setDepTerminal((String)value);
      }
      break;

    case DEP_DATE:
      if (value == null) {
        unsetDepDate();
      } else {
        setDepDate((String)value);
      }
      break;

    case DEP_TIME:
      if (value == null) {
        unsetDepTime();
      } else {
        setDepTime((String)value);
      }
      break;

    case ARR_AIRPORT:
      if (value == null) {
        unsetArrAirport();
      } else {
        setArrAirport((String)value);
      }
      break;

    case ARR_TERMINAL:
      if (value == null) {
        unsetArrTerminal();
      } else {
        setArrTerminal((String)value);
      }
      break;

    case ARR_DATE:
      if (value == null) {
        unsetArrDate();
      } else {
        setArrDate((String)value);
      }
      break;

    case ARR_TIME:
      if (value == null) {
        unsetArrTime();
      } else {
        setArrTime((String)value);
      }
      break;

    case STOP_OVER:
      if (value == null) {
        unsetStopOver();
      } else {
        setStopOver((List<StopOver>)value);
      }
      break;

    case CODE_SHARE:
      if (value == null) {
        unsetCodeShare();
      } else {
        setCodeShare((String)value);
      }
      break;

    case FLIGHT_DURATION:
      if (value == null) {
        unsetFlightDuration();
      } else {
        setFlightDuration((String)value);
      }
      break;

    case TPM:
      if (value == null) {
        unsetTpm();
      } else {
        setTpm((Integer)value);
      }
      break;

    case PLANE_TYPE:
      if (value == null) {
        unsetPlaneType();
      } else {
        setPlaneType((String)value);
      }
      break;

    case MEAL_TYPE:
      if (value == null) {
        unsetMealType();
      } else {
        setMealType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case FLIGHT_NO:
      return getFlightNo();

    case CARRIER_FLIGHT_NO:
      return getCarrierFlightNo();

    case CABIN:
      return getCabin();

    case CABIN_RANK:
      return getCabinRank();

    case DEP_AIRPORT:
      return getDepAirport();

    case DEP_TERMINAL:
      return getDepTerminal();

    case DEP_DATE:
      return getDepDate();

    case DEP_TIME:
      return getDepTime();

    case ARR_AIRPORT:
      return getArrAirport();

    case ARR_TERMINAL:
      return getArrTerminal();

    case ARR_DATE:
      return getArrDate();

    case ARR_TIME:
      return getArrTime();

    case STOP_OVER:
      return getStopOver();

    case CODE_SHARE:
      return getCodeShare();

    case FLIGHT_DURATION:
      return getFlightDuration();

    case TPM:
      return Integer.valueOf(getTpm());

    case PLANE_TYPE:
      return getPlaneType();

    case MEAL_TYPE:
      return getMealType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case FLIGHT_NO:
      return isSetFlightNo();
    case CARRIER_FLIGHT_NO:
      return isSetCarrierFlightNo();
    case CABIN:
      return isSetCabin();
    case CABIN_RANK:
      return isSetCabinRank();
    case DEP_AIRPORT:
      return isSetDepAirport();
    case DEP_TERMINAL:
      return isSetDepTerminal();
    case DEP_DATE:
      return isSetDepDate();
    case DEP_TIME:
      return isSetDepTime();
    case ARR_AIRPORT:
      return isSetArrAirport();
    case ARR_TERMINAL:
      return isSetArrTerminal();
    case ARR_DATE:
      return isSetArrDate();
    case ARR_TIME:
      return isSetArrTime();
    case STOP_OVER:
      return isSetStopOver();
    case CODE_SHARE:
      return isSetCodeShare();
    case FLIGHT_DURATION:
      return isSetFlightDuration();
    case TPM:
      return isSetTpm();
    case PLANE_TYPE:
      return isSetPlaneType();
    case MEAL_TYPE:
      return isSetMealType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Segement)
      return this.equals((Segement)that);
    return false;
  }

  public boolean equals(Segement that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_flightNo = true && this.isSetFlightNo();
    boolean that_present_flightNo = true && that.isSetFlightNo();
    if (this_present_flightNo || that_present_flightNo) {
      if (!(this_present_flightNo && that_present_flightNo))
        return false;
      if (!this.flightNo.equals(that.flightNo))
        return false;
    }

    boolean this_present_carrierFlightNo = true && this.isSetCarrierFlightNo();
    boolean that_present_carrierFlightNo = true && that.isSetCarrierFlightNo();
    if (this_present_carrierFlightNo || that_present_carrierFlightNo) {
      if (!(this_present_carrierFlightNo && that_present_carrierFlightNo))
        return false;
      if (!this.carrierFlightNo.equals(that.carrierFlightNo))
        return false;
    }

    boolean this_present_cabin = true && this.isSetCabin();
    boolean that_present_cabin = true && that.isSetCabin();
    if (this_present_cabin || that_present_cabin) {
      if (!(this_present_cabin && that_present_cabin))
        return false;
      if (!this.cabin.equals(that.cabin))
        return false;
    }

    boolean this_present_cabinRank = true && this.isSetCabinRank();
    boolean that_present_cabinRank = true && that.isSetCabinRank();
    if (this_present_cabinRank || that_present_cabinRank) {
      if (!(this_present_cabinRank && that_present_cabinRank))
        return false;
      if (!this.cabinRank.equals(that.cabinRank))
        return false;
    }

    boolean this_present_depAirport = true && this.isSetDepAirport();
    boolean that_present_depAirport = true && that.isSetDepAirport();
    if (this_present_depAirport || that_present_depAirport) {
      if (!(this_present_depAirport && that_present_depAirport))
        return false;
      if (!this.depAirport.equals(that.depAirport))
        return false;
    }

    boolean this_present_depTerminal = true && this.isSetDepTerminal();
    boolean that_present_depTerminal = true && that.isSetDepTerminal();
    if (this_present_depTerminal || that_present_depTerminal) {
      if (!(this_present_depTerminal && that_present_depTerminal))
        return false;
      if (!this.depTerminal.equals(that.depTerminal))
        return false;
    }

    boolean this_present_depDate = true && this.isSetDepDate();
    boolean that_present_depDate = true && that.isSetDepDate();
    if (this_present_depDate || that_present_depDate) {
      if (!(this_present_depDate && that_present_depDate))
        return false;
      if (!this.depDate.equals(that.depDate))
        return false;
    }

    boolean this_present_depTime = true && this.isSetDepTime();
    boolean that_present_depTime = true && that.isSetDepTime();
    if (this_present_depTime || that_present_depTime) {
      if (!(this_present_depTime && that_present_depTime))
        return false;
      if (!this.depTime.equals(that.depTime))
        return false;
    }

    boolean this_present_arrAirport = true && this.isSetArrAirport();
    boolean that_present_arrAirport = true && that.isSetArrAirport();
    if (this_present_arrAirport || that_present_arrAirport) {
      if (!(this_present_arrAirport && that_present_arrAirport))
        return false;
      if (!this.arrAirport.equals(that.arrAirport))
        return false;
    }

    boolean this_present_arrTerminal = true && this.isSetArrTerminal();
    boolean that_present_arrTerminal = true && that.isSetArrTerminal();
    if (this_present_arrTerminal || that_present_arrTerminal) {
      if (!(this_present_arrTerminal && that_present_arrTerminal))
        return false;
      if (!this.arrTerminal.equals(that.arrTerminal))
        return false;
    }

    boolean this_present_arrDate = true && this.isSetArrDate();
    boolean that_present_arrDate = true && that.isSetArrDate();
    if (this_present_arrDate || that_present_arrDate) {
      if (!(this_present_arrDate && that_present_arrDate))
        return false;
      if (!this.arrDate.equals(that.arrDate))
        return false;
    }

    boolean this_present_arrTime = true && this.isSetArrTime();
    boolean that_present_arrTime = true && that.isSetArrTime();
    if (this_present_arrTime || that_present_arrTime) {
      if (!(this_present_arrTime && that_present_arrTime))
        return false;
      if (!this.arrTime.equals(that.arrTime))
        return false;
    }

    boolean this_present_stopOver = true && this.isSetStopOver();
    boolean that_present_stopOver = true && that.isSetStopOver();
    if (this_present_stopOver || that_present_stopOver) {
      if (!(this_present_stopOver && that_present_stopOver))
        return false;
      if (!this.stopOver.equals(that.stopOver))
        return false;
    }

    boolean this_present_codeShare = true && this.isSetCodeShare();
    boolean that_present_codeShare = true && that.isSetCodeShare();
    if (this_present_codeShare || that_present_codeShare) {
      if (!(this_present_codeShare && that_present_codeShare))
        return false;
      if (!this.codeShare.equals(that.codeShare))
        return false;
    }

    boolean this_present_flightDuration = true && this.isSetFlightDuration();
    boolean that_present_flightDuration = true && that.isSetFlightDuration();
    if (this_present_flightDuration || that_present_flightDuration) {
      if (!(this_present_flightDuration && that_present_flightDuration))
        return false;
      if (!this.flightDuration.equals(that.flightDuration))
        return false;
    }

    boolean this_present_tpm = true && this.isSetTpm();
    boolean that_present_tpm = true && that.isSetTpm();
    if (this_present_tpm || that_present_tpm) {
      if (!(this_present_tpm && that_present_tpm))
        return false;
      if (this.tpm != that.tpm)
        return false;
    }

    boolean this_present_planeType = true && this.isSetPlaneType();
    boolean that_present_planeType = true && that.isSetPlaneType();
    if (this_present_planeType || that_present_planeType) {
      if (!(this_present_planeType && that_present_planeType))
        return false;
      if (!this.planeType.equals(that.planeType))
        return false;
    }

    boolean this_present_mealType = true && this.isSetMealType();
    boolean that_present_mealType = true && that.isSetMealType();
    if (this_present_mealType || that_present_mealType) {
      if (!(this_present_mealType && that_present_mealType))
        return false;
      if (!this.mealType.equals(that.mealType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(Segement other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    Segement typedOther = (Segement)other;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(typedOther.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, typedOther.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlightNo()).compareTo(typedOther.isSetFlightNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlightNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flightNo, typedOther.flightNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCarrierFlightNo()).compareTo(typedOther.isSetCarrierFlightNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCarrierFlightNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carrierFlightNo, typedOther.carrierFlightNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCabin()).compareTo(typedOther.isSetCabin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCabin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cabin, typedOther.cabin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCabinRank()).compareTo(typedOther.isSetCabinRank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCabinRank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cabinRank, typedOther.cabinRank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepAirport()).compareTo(typedOther.isSetDepAirport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepAirport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depAirport, typedOther.depAirport);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepTerminal()).compareTo(typedOther.isSetDepTerminal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepTerminal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depTerminal, typedOther.depTerminal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepDate()).compareTo(typedOther.isSetDepDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depDate, typedOther.depDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepTime()).compareTo(typedOther.isSetDepTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depTime, typedOther.depTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArrAirport()).compareTo(typedOther.isSetArrAirport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrAirport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrAirport, typedOther.arrAirport);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArrTerminal()).compareTo(typedOther.isSetArrTerminal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrTerminal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrTerminal, typedOther.arrTerminal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArrDate()).compareTo(typedOther.isSetArrDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrDate, typedOther.arrDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArrTime()).compareTo(typedOther.isSetArrTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrTime, typedOther.arrTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStopOver()).compareTo(typedOther.isSetStopOver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopOver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopOver, typedOther.stopOver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCodeShare()).compareTo(typedOther.isSetCodeShare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCodeShare()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.codeShare, typedOther.codeShare);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlightDuration()).compareTo(typedOther.isSetFlightDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlightDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flightDuration, typedOther.flightDuration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTpm()).compareTo(typedOther.isSetTpm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTpm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tpm, typedOther.tpm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlaneType()).compareTo(typedOther.isSetPlaneType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlaneType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.planeType, typedOther.planeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMealType()).compareTo(typedOther.isSetMealType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMealType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mealType, typedOther.mealType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Segement(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("flightNo:");
    if (this.flightNo == null) {
      sb.append("null");
    } else {
      sb.append(this.flightNo);
    }
    first = false;
    if (isSetCarrierFlightNo()) {
      if (!first) sb.append(", ");
      sb.append("carrierFlightNo:");
      if (this.carrierFlightNo == null) {
        sb.append("null");
      } else {
        sb.append(this.carrierFlightNo);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("cabin:");
    if (this.cabin == null) {
      sb.append("null");
    } else {
      sb.append(this.cabin);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cabinRank:");
    if (this.cabinRank == null) {
      sb.append("null");
    } else {
      sb.append(this.cabinRank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("depAirport:");
    if (this.depAirport == null) {
      sb.append("null");
    } else {
      sb.append(this.depAirport);
    }
    first = false;
    if (isSetDepTerminal()) {
      if (!first) sb.append(", ");
      sb.append("depTerminal:");
      if (this.depTerminal == null) {
        sb.append("null");
      } else {
        sb.append(this.depTerminal);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("depDate:");
    if (this.depDate == null) {
      sb.append("null");
    } else {
      sb.append(this.depDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("depTime:");
    if (this.depTime == null) {
      sb.append("null");
    } else {
      sb.append(this.depTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("arrAirport:");
    if (this.arrAirport == null) {
      sb.append("null");
    } else {
      sb.append(this.arrAirport);
    }
    first = false;
    if (isSetArrTerminal()) {
      if (!first) sb.append(", ");
      sb.append("arrTerminal:");
      if (this.arrTerminal == null) {
        sb.append("null");
      } else {
        sb.append(this.arrTerminal);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("arrDate:");
    if (this.arrDate == null) {
      sb.append("null");
    } else {
      sb.append(this.arrDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("arrTime:");
    if (this.arrTime == null) {
      sb.append("null");
    } else {
      sb.append(this.arrTime);
    }
    first = false;
    if (isSetStopOver()) {
      if (!first) sb.append(", ");
      sb.append("stopOver:");
      if (this.stopOver == null) {
        sb.append("null");
      } else {
        sb.append(this.stopOver);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("codeShare:");
    if (this.codeShare == null) {
      sb.append("null");
    } else {
      sb.append(this.codeShare);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flightDuration:");
    if (this.flightDuration == null) {
      sb.append("null");
    } else {
      sb.append(this.flightDuration);
    }
    first = false;
    if (isSetTpm()) {
      if (!first) sb.append(", ");
      sb.append("tpm:");
      sb.append(this.tpm);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("planeType:");
    if (this.planeType == null) {
      sb.append("null");
    } else {
      sb.append(this.planeType);
    }
    first = false;
    if (isSetMealType()) {
      if (!first) sb.append(", ");
      sb.append("mealType:");
      if (this.mealType == null) {
        sb.append("null");
      } else {
        sb.append(this.mealType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (flightNo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'flightNo' was not present! Struct: " + toString());
    }
    if (cabin == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cabin' was not present! Struct: " + toString());
    }
    if (cabinRank == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cabinRank' was not present! Struct: " + toString());
    }
    if (depAirport == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'depAirport' was not present! Struct: " + toString());
    }
    if (depDate == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'depDate' was not present! Struct: " + toString());
    }
    if (depTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'depTime' was not present! Struct: " + toString());
    }
    if (arrAirport == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'arrAirport' was not present! Struct: " + toString());
    }
    if (arrDate == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'arrDate' was not present! Struct: " + toString());
    }
    if (arrTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'arrTime' was not present! Struct: " + toString());
    }
    if (codeShare == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'codeShare' was not present! Struct: " + toString());
    }
    if (flightDuration == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'flightDuration' was not present! Struct: " + toString());
    }
    if (planeType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'planeType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SegementStandardSchemeFactory implements SchemeFactory {
    public SegementStandardScheme getScheme() {
      return new SegementStandardScheme();
    }
  }

  private static class SegementStandardScheme extends StandardScheme<Segement> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Segement struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FLIGHT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flightNo = iprot.readString();
              struct.setFlightNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CARRIER_FLIGHT_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.carrierFlightNo = iprot.readString();
              struct.setCarrierFlightNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CABIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cabin = iprot.readString();
              struct.setCabinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CABIN_RANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cabinRank = iprot.readString();
              struct.setCabinRankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEP_AIRPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.depAirport = iprot.readString();
              struct.setDepAirportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEP_TERMINAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.depTerminal = iprot.readString();
              struct.setDepTerminalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DEP_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.depDate = iprot.readString();
              struct.setDepDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DEP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.depTime = iprot.readString();
              struct.setDepTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ARR_AIRPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.arrAirport = iprot.readString();
              struct.setArrAirportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ARR_TERMINAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.arrTerminal = iprot.readString();
              struct.setArrTerminalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ARR_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.arrDate = iprot.readString();
              struct.setArrDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ARR_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.arrTime = iprot.readString();
              struct.setArrTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // STOP_OVER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.stopOver = new ArrayList<StopOver>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  StopOver _elem2; // required
                  _elem2 = new StopOver();
                  _elem2.read(iprot);
                  struct.stopOver.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setStopOverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CODE_SHARE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.codeShare = iprot.readString();
              struct.setCodeShareIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FLIGHT_DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.flightDuration = iprot.readString();
              struct.setFlightDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TPM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tpm = iprot.readI32();
              struct.setTpmIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // PLANE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.planeType = iprot.readString();
              struct.setPlaneTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // MEAL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mealType = iprot.readString();
              struct.setMealTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Segement struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.flightNo != null) {
        oprot.writeFieldBegin(FLIGHT_NO_FIELD_DESC);
        oprot.writeString(struct.flightNo);
        oprot.writeFieldEnd();
      }
      if (struct.carrierFlightNo != null) {
        if (struct.isSetCarrierFlightNo()) {
          oprot.writeFieldBegin(CARRIER_FLIGHT_NO_FIELD_DESC);
          oprot.writeString(struct.carrierFlightNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cabin != null) {
        oprot.writeFieldBegin(CABIN_FIELD_DESC);
        oprot.writeString(struct.cabin);
        oprot.writeFieldEnd();
      }
      if (struct.cabinRank != null) {
        oprot.writeFieldBegin(CABIN_RANK_FIELD_DESC);
        oprot.writeString(struct.cabinRank);
        oprot.writeFieldEnd();
      }
      if (struct.depAirport != null) {
        oprot.writeFieldBegin(DEP_AIRPORT_FIELD_DESC);
        oprot.writeString(struct.depAirport);
        oprot.writeFieldEnd();
      }
      if (struct.depTerminal != null) {
        if (struct.isSetDepTerminal()) {
          oprot.writeFieldBegin(DEP_TERMINAL_FIELD_DESC);
          oprot.writeString(struct.depTerminal);
          oprot.writeFieldEnd();
        }
      }
      if (struct.depDate != null) {
        oprot.writeFieldBegin(DEP_DATE_FIELD_DESC);
        oprot.writeString(struct.depDate);
        oprot.writeFieldEnd();
      }
      if (struct.depTime != null) {
        oprot.writeFieldBegin(DEP_TIME_FIELD_DESC);
        oprot.writeString(struct.depTime);
        oprot.writeFieldEnd();
      }
      if (struct.arrAirport != null) {
        oprot.writeFieldBegin(ARR_AIRPORT_FIELD_DESC);
        oprot.writeString(struct.arrAirport);
        oprot.writeFieldEnd();
      }
      if (struct.arrTerminal != null) {
        if (struct.isSetArrTerminal()) {
          oprot.writeFieldBegin(ARR_TERMINAL_FIELD_DESC);
          oprot.writeString(struct.arrTerminal);
          oprot.writeFieldEnd();
        }
      }
      if (struct.arrDate != null) {
        oprot.writeFieldBegin(ARR_DATE_FIELD_DESC);
        oprot.writeString(struct.arrDate);
        oprot.writeFieldEnd();
      }
      if (struct.arrTime != null) {
        oprot.writeFieldBegin(ARR_TIME_FIELD_DESC);
        oprot.writeString(struct.arrTime);
        oprot.writeFieldEnd();
      }
      if (struct.stopOver != null) {
        if (struct.isSetStopOver()) {
          oprot.writeFieldBegin(STOP_OVER_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.stopOver.size()));
            for (StopOver _iter3 : struct.stopOver)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.codeShare != null) {
        oprot.writeFieldBegin(CODE_SHARE_FIELD_DESC);
        oprot.writeString(struct.codeShare);
        oprot.writeFieldEnd();
      }
      if (struct.flightDuration != null) {
        oprot.writeFieldBegin(FLIGHT_DURATION_FIELD_DESC);
        oprot.writeString(struct.flightDuration);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTpm()) {
        oprot.writeFieldBegin(TPM_FIELD_DESC);
        oprot.writeI32(struct.tpm);
        oprot.writeFieldEnd();
      }
      if (struct.planeType != null) {
        oprot.writeFieldBegin(PLANE_TYPE_FIELD_DESC);
        oprot.writeString(struct.planeType);
        oprot.writeFieldEnd();
      }
      if (struct.mealType != null) {
        if (struct.isSetMealType()) {
          oprot.writeFieldBegin(MEAL_TYPE_FIELD_DESC);
          oprot.writeString(struct.mealType);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SegementTupleSchemeFactory implements SchemeFactory {
    public SegementTupleScheme getScheme() {
      return new SegementTupleScheme();
    }
  }

  private static class SegementTupleScheme extends TupleScheme<Segement> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Segement struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      oprot.writeString(struct.flightNo);
      oprot.writeString(struct.cabin);
      oprot.writeString(struct.cabinRank);
      oprot.writeString(struct.depAirport);
      oprot.writeString(struct.depDate);
      oprot.writeString(struct.depTime);
      oprot.writeString(struct.arrAirport);
      oprot.writeString(struct.arrDate);
      oprot.writeString(struct.arrTime);
      oprot.writeString(struct.codeShare);
      oprot.writeString(struct.flightDuration);
      oprot.writeString(struct.planeType);
      BitSet optionals = new BitSet();
      if (struct.isSetCarrierFlightNo()) {
        optionals.set(0);
      }
      if (struct.isSetDepTerminal()) {
        optionals.set(1);
      }
      if (struct.isSetArrTerminal()) {
        optionals.set(2);
      }
      if (struct.isSetStopOver()) {
        optionals.set(3);
      }
      if (struct.isSetTpm()) {
        optionals.set(4);
      }
      if (struct.isSetMealType()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetCarrierFlightNo()) {
        oprot.writeString(struct.carrierFlightNo);
      }
      if (struct.isSetDepTerminal()) {
        oprot.writeString(struct.depTerminal);
      }
      if (struct.isSetArrTerminal()) {
        oprot.writeString(struct.arrTerminal);
      }
      if (struct.isSetStopOver()) {
        {
          oprot.writeI32(struct.stopOver.size());
          for (StopOver _iter4 : struct.stopOver)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetTpm()) {
        oprot.writeI32(struct.tpm);
      }
      if (struct.isSetMealType()) {
        oprot.writeString(struct.mealType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Segement struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.flightNo = iprot.readString();
      struct.setFlightNoIsSet(true);
      struct.cabin = iprot.readString();
      struct.setCabinIsSet(true);
      struct.cabinRank = iprot.readString();
      struct.setCabinRankIsSet(true);
      struct.depAirport = iprot.readString();
      struct.setDepAirportIsSet(true);
      struct.depDate = iprot.readString();
      struct.setDepDateIsSet(true);
      struct.depTime = iprot.readString();
      struct.setDepTimeIsSet(true);
      struct.arrAirport = iprot.readString();
      struct.setArrAirportIsSet(true);
      struct.arrDate = iprot.readString();
      struct.setArrDateIsSet(true);
      struct.arrTime = iprot.readString();
      struct.setArrTimeIsSet(true);
      struct.codeShare = iprot.readString();
      struct.setCodeShareIsSet(true);
      struct.flightDuration = iprot.readString();
      struct.setFlightDurationIsSet(true);
      struct.planeType = iprot.readString();
      struct.setPlaneTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.carrierFlightNo = iprot.readString();
        struct.setCarrierFlightNoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.depTerminal = iprot.readString();
        struct.setDepTerminalIsSet(true);
      }
      if (incoming.get(2)) {
        struct.arrTerminal = iprot.readString();
        struct.setArrTerminalIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.stopOver = new ArrayList<StopOver>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            StopOver _elem7; // required
            _elem7 = new StopOver();
            _elem7.read(iprot);
            struct.stopOver.add(_elem7);
          }
        }
        struct.setStopOverIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tpm = iprot.readI32();
        struct.setTpmIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mealType = iprot.readString();
        struct.setMealTypeIsSet(true);
      }
    }
  }

}

