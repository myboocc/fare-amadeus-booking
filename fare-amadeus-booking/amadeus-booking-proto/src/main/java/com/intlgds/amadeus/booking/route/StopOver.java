/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.intlgds.amadeus.booking.route;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StopOver implements org.apache.thrift.TBase<StopOver, StopOver._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StopOver");

  private static final org.apache.thrift.protocol.TField STOP_AIRPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("stopAirport", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField GROUND_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("groundTimes", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ARR_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("arrDate", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ARR_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("arrTime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DEP_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("depDate", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DEP_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("depTime", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StopOverStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StopOverTupleSchemeFactory());
  }

  public String stopAirport; // required
  public String groundTimes; // required
  public String arrDate; // required
  public String arrTime; // required
  public String depDate; // required
  public String depTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STOP_AIRPORT((short)1, "stopAirport"),
    GROUND_TIMES((short)2, "groundTimes"),
    ARR_DATE((short)3, "arrDate"),
    ARR_TIME((short)4, "arrTime"),
    DEP_DATE((short)5, "depDate"),
    DEP_TIME((short)6, "depTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STOP_AIRPORT
          return STOP_AIRPORT;
        case 2: // GROUND_TIMES
          return GROUND_TIMES;
        case 3: // ARR_DATE
          return ARR_DATE;
        case 4: // ARR_TIME
          return ARR_TIME;
        case 5: // DEP_DATE
          return DEP_DATE;
        case 6: // DEP_TIME
          return DEP_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STOP_AIRPORT, new org.apache.thrift.meta_data.FieldMetaData("stopAirport", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUND_TIMES, new org.apache.thrift.meta_data.FieldMetaData("groundTimes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARR_DATE, new org.apache.thrift.meta_data.FieldMetaData("arrDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARR_TIME, new org.apache.thrift.meta_data.FieldMetaData("arrTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEP_DATE, new org.apache.thrift.meta_data.FieldMetaData("depDate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEP_TIME, new org.apache.thrift.meta_data.FieldMetaData("depTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StopOver.class, metaDataMap);
  }

  public StopOver() {
  }

  public StopOver(
    String stopAirport,
    String groundTimes,
    String arrDate,
    String arrTime,
    String depDate,
    String depTime)
  {
    this();
    this.stopAirport = stopAirport;
    this.groundTimes = groundTimes;
    this.arrDate = arrDate;
    this.arrTime = arrTime;
    this.depDate = depDate;
    this.depTime = depTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StopOver(StopOver other) {
    if (other.isSetStopAirport()) {
      this.stopAirport = other.stopAirport;
    }
    if (other.isSetGroundTimes()) {
      this.groundTimes = other.groundTimes;
    }
    if (other.isSetArrDate()) {
      this.arrDate = other.arrDate;
    }
    if (other.isSetArrTime()) {
      this.arrTime = other.arrTime;
    }
    if (other.isSetDepDate()) {
      this.depDate = other.depDate;
    }
    if (other.isSetDepTime()) {
      this.depTime = other.depTime;
    }
  }

  public StopOver deepCopy() {
    return new StopOver(this);
  }

  @Override
  public void clear() {
    this.stopAirport = null;
    this.groundTimes = null;
    this.arrDate = null;
    this.arrTime = null;
    this.depDate = null;
    this.depTime = null;
  }

  public String getStopAirport() {
    return this.stopAirport;
  }

  public StopOver setStopAirport(String stopAirport) {
    this.stopAirport = stopAirport;
    return this;
  }

  public void unsetStopAirport() {
    this.stopAirport = null;
  }

  /** Returns true if field stopAirport is set (has been assigned a value) and false otherwise */
  public boolean isSetStopAirport() {
    return this.stopAirport != null;
  }

  public void setStopAirportIsSet(boolean value) {
    if (!value) {
      this.stopAirport = null;
    }
  }

  public String getGroundTimes() {
    return this.groundTimes;
  }

  public StopOver setGroundTimes(String groundTimes) {
    this.groundTimes = groundTimes;
    return this;
  }

  public void unsetGroundTimes() {
    this.groundTimes = null;
  }

  /** Returns true if field groundTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetGroundTimes() {
    return this.groundTimes != null;
  }

  public void setGroundTimesIsSet(boolean value) {
    if (!value) {
      this.groundTimes = null;
    }
  }

  public String getArrDate() {
    return this.arrDate;
  }

  public StopOver setArrDate(String arrDate) {
    this.arrDate = arrDate;
    return this;
  }

  public void unsetArrDate() {
    this.arrDate = null;
  }

  /** Returns true if field arrDate is set (has been assigned a value) and false otherwise */
  public boolean isSetArrDate() {
    return this.arrDate != null;
  }

  public void setArrDateIsSet(boolean value) {
    if (!value) {
      this.arrDate = null;
    }
  }

  public String getArrTime() {
    return this.arrTime;
  }

  public StopOver setArrTime(String arrTime) {
    this.arrTime = arrTime;
    return this;
  }

  public void unsetArrTime() {
    this.arrTime = null;
  }

  /** Returns true if field arrTime is set (has been assigned a value) and false otherwise */
  public boolean isSetArrTime() {
    return this.arrTime != null;
  }

  public void setArrTimeIsSet(boolean value) {
    if (!value) {
      this.arrTime = null;
    }
  }

  public String getDepDate() {
    return this.depDate;
  }

  public StopOver setDepDate(String depDate) {
    this.depDate = depDate;
    return this;
  }

  public void unsetDepDate() {
    this.depDate = null;
  }

  /** Returns true if field depDate is set (has been assigned a value) and false otherwise */
  public boolean isSetDepDate() {
    return this.depDate != null;
  }

  public void setDepDateIsSet(boolean value) {
    if (!value) {
      this.depDate = null;
    }
  }

  public String getDepTime() {
    return this.depTime;
  }

  public StopOver setDepTime(String depTime) {
    this.depTime = depTime;
    return this;
  }

  public void unsetDepTime() {
    this.depTime = null;
  }

  /** Returns true if field depTime is set (has been assigned a value) and false otherwise */
  public boolean isSetDepTime() {
    return this.depTime != null;
  }

  public void setDepTimeIsSet(boolean value) {
    if (!value) {
      this.depTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STOP_AIRPORT:
      if (value == null) {
        unsetStopAirport();
      } else {
        setStopAirport((String)value);
      }
      break;

    case GROUND_TIMES:
      if (value == null) {
        unsetGroundTimes();
      } else {
        setGroundTimes((String)value);
      }
      break;

    case ARR_DATE:
      if (value == null) {
        unsetArrDate();
      } else {
        setArrDate((String)value);
      }
      break;

    case ARR_TIME:
      if (value == null) {
        unsetArrTime();
      } else {
        setArrTime((String)value);
      }
      break;

    case DEP_DATE:
      if (value == null) {
        unsetDepDate();
      } else {
        setDepDate((String)value);
      }
      break;

    case DEP_TIME:
      if (value == null) {
        unsetDepTime();
      } else {
        setDepTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STOP_AIRPORT:
      return getStopAirport();

    case GROUND_TIMES:
      return getGroundTimes();

    case ARR_DATE:
      return getArrDate();

    case ARR_TIME:
      return getArrTime();

    case DEP_DATE:
      return getDepDate();

    case DEP_TIME:
      return getDepTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STOP_AIRPORT:
      return isSetStopAirport();
    case GROUND_TIMES:
      return isSetGroundTimes();
    case ARR_DATE:
      return isSetArrDate();
    case ARR_TIME:
      return isSetArrTime();
    case DEP_DATE:
      return isSetDepDate();
    case DEP_TIME:
      return isSetDepTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StopOver)
      return this.equals((StopOver)that);
    return false;
  }

  public boolean equals(StopOver that) {
    if (that == null)
      return false;

    boolean this_present_stopAirport = true && this.isSetStopAirport();
    boolean that_present_stopAirport = true && that.isSetStopAirport();
    if (this_present_stopAirport || that_present_stopAirport) {
      if (!(this_present_stopAirport && that_present_stopAirport))
        return false;
      if (!this.stopAirport.equals(that.stopAirport))
        return false;
    }

    boolean this_present_groundTimes = true && this.isSetGroundTimes();
    boolean that_present_groundTimes = true && that.isSetGroundTimes();
    if (this_present_groundTimes || that_present_groundTimes) {
      if (!(this_present_groundTimes && that_present_groundTimes))
        return false;
      if (!this.groundTimes.equals(that.groundTimes))
        return false;
    }

    boolean this_present_arrDate = true && this.isSetArrDate();
    boolean that_present_arrDate = true && that.isSetArrDate();
    if (this_present_arrDate || that_present_arrDate) {
      if (!(this_present_arrDate && that_present_arrDate))
        return false;
      if (!this.arrDate.equals(that.arrDate))
        return false;
    }

    boolean this_present_arrTime = true && this.isSetArrTime();
    boolean that_present_arrTime = true && that.isSetArrTime();
    if (this_present_arrTime || that_present_arrTime) {
      if (!(this_present_arrTime && that_present_arrTime))
        return false;
      if (!this.arrTime.equals(that.arrTime))
        return false;
    }

    boolean this_present_depDate = true && this.isSetDepDate();
    boolean that_present_depDate = true && that.isSetDepDate();
    if (this_present_depDate || that_present_depDate) {
      if (!(this_present_depDate && that_present_depDate))
        return false;
      if (!this.depDate.equals(that.depDate))
        return false;
    }

    boolean this_present_depTime = true && this.isSetDepTime();
    boolean that_present_depTime = true && that.isSetDepTime();
    if (this_present_depTime || that_present_depTime) {
      if (!(this_present_depTime && that_present_depTime))
        return false;
      if (!this.depTime.equals(that.depTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(StopOver other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    StopOver typedOther = (StopOver)other;

    lastComparison = Boolean.valueOf(isSetStopAirport()).compareTo(typedOther.isSetStopAirport());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStopAirport()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stopAirport, typedOther.stopAirport);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroundTimes()).compareTo(typedOther.isSetGroundTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroundTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groundTimes, typedOther.groundTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArrDate()).compareTo(typedOther.isSetArrDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrDate, typedOther.arrDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArrTime()).compareTo(typedOther.isSetArrTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrTime, typedOther.arrTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepDate()).compareTo(typedOther.isSetDepDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depDate, typedOther.depDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepTime()).compareTo(typedOther.isSetDepTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depTime, typedOther.depTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StopOver(");
    boolean first = true;

    sb.append("stopAirport:");
    if (this.stopAirport == null) {
      sb.append("null");
    } else {
      sb.append(this.stopAirport);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groundTimes:");
    if (this.groundTimes == null) {
      sb.append("null");
    } else {
      sb.append(this.groundTimes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("arrDate:");
    if (this.arrDate == null) {
      sb.append("null");
    } else {
      sb.append(this.arrDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("arrTime:");
    if (this.arrTime == null) {
      sb.append("null");
    } else {
      sb.append(this.arrTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("depDate:");
    if (this.depDate == null) {
      sb.append("null");
    } else {
      sb.append(this.depDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("depTime:");
    if (this.depTime == null) {
      sb.append("null");
    } else {
      sb.append(this.depTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (stopAirport == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stopAirport' was not present! Struct: " + toString());
    }
    if (groundTimes == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'groundTimes' was not present! Struct: " + toString());
    }
    if (arrDate == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'arrDate' was not present! Struct: " + toString());
    }
    if (arrTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'arrTime' was not present! Struct: " + toString());
    }
    if (depDate == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'depDate' was not present! Struct: " + toString());
    }
    if (depTime == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'depTime' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StopOverStandardSchemeFactory implements SchemeFactory {
    public StopOverStandardScheme getScheme() {
      return new StopOverStandardScheme();
    }
  }

  private static class StopOverStandardScheme extends StandardScheme<StopOver> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StopOver struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STOP_AIRPORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stopAirport = iprot.readString();
              struct.setStopAirportIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUND_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groundTimes = iprot.readString();
              struct.setGroundTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ARR_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.arrDate = iprot.readString();
              struct.setArrDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ARR_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.arrTime = iprot.readString();
              struct.setArrTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEP_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.depDate = iprot.readString();
              struct.setDepDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEP_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.depTime = iprot.readString();
              struct.setDepTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StopOver struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stopAirport != null) {
        oprot.writeFieldBegin(STOP_AIRPORT_FIELD_DESC);
        oprot.writeString(struct.stopAirport);
        oprot.writeFieldEnd();
      }
      if (struct.groundTimes != null) {
        oprot.writeFieldBegin(GROUND_TIMES_FIELD_DESC);
        oprot.writeString(struct.groundTimes);
        oprot.writeFieldEnd();
      }
      if (struct.arrDate != null) {
        oprot.writeFieldBegin(ARR_DATE_FIELD_DESC);
        oprot.writeString(struct.arrDate);
        oprot.writeFieldEnd();
      }
      if (struct.arrTime != null) {
        oprot.writeFieldBegin(ARR_TIME_FIELD_DESC);
        oprot.writeString(struct.arrTime);
        oprot.writeFieldEnd();
      }
      if (struct.depDate != null) {
        oprot.writeFieldBegin(DEP_DATE_FIELD_DESC);
        oprot.writeString(struct.depDate);
        oprot.writeFieldEnd();
      }
      if (struct.depTime != null) {
        oprot.writeFieldBegin(DEP_TIME_FIELD_DESC);
        oprot.writeString(struct.depTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StopOverTupleSchemeFactory implements SchemeFactory {
    public StopOverTupleScheme getScheme() {
      return new StopOverTupleScheme();
    }
  }

  private static class StopOverTupleScheme extends TupleScheme<StopOver> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StopOver struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.stopAirport);
      oprot.writeString(struct.groundTimes);
      oprot.writeString(struct.arrDate);
      oprot.writeString(struct.arrTime);
      oprot.writeString(struct.depDate);
      oprot.writeString(struct.depTime);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StopOver struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.stopAirport = iprot.readString();
      struct.setStopAirportIsSet(true);
      struct.groundTimes = iprot.readString();
      struct.setGroundTimesIsSet(true);
      struct.arrDate = iprot.readString();
      struct.setArrDateIsSet(true);
      struct.arrTime = iprot.readString();
      struct.setArrTimeIsSet(true);
      struct.depDate = iprot.readString();
      struct.setDepDateIsSet(true);
      struct.depTime = iprot.readString();
      struct.setDepTimeIsSet(true);
    }
  }

}

